FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: count
TypeDecl: count
IdentifierType: ['int']
Decl: value
ArrayDecl:
TypeDecl: value
IdentifierType: ['int']
ID: MAXVAL
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: k
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <=
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: value
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <=
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: count
Constant: 0
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: <=
ID: j
ID: n
UnaryOp: p++
ID: j
If:
BinaryOp: ==
BinaryOp: +
ArrayRef:
ID: value
ID: i
ArrayRef:
ID: value
BinaryOp: +
ID: i
ID: j
ID: k
Compound:
Assignment: =
ID: count
BinaryOp: +
ID: count
Constant: 1
If:
BinaryOp: >
ID: count
Constant: 0
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "lucky"
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "unlucky"
Return:
Constant: 0
