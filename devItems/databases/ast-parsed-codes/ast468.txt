FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: x
TypeDecl: x
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: k
TypeDecl: k
IdentifierType: ['int']
Constant: 0
Decl: b
TypeDecl: b
IdentifierType: ['int']
Constant: 0
Decl: r1
ArrayDecl:
TypeDecl: r1
IdentifierType: ['int']
Constant: 100
Decl: r2
ArrayDecl:
TypeDecl: r2
IdentifierType: ['int']
Constant: 100
Decl: m
TypeDecl: m
IdentifierType: ['long', 'int']
Decl: y
TypeDecl: y
IdentifierType: ['long', 'int']
Decl: r
ArrayDecl:
TypeDecl: r
IdentifierType: ['int']
Constant: 100
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 100
FuncCall:
ID: scanf
ExprList:
Constant: "%d %ld %d %ld"
UnaryOp: &
ID: n
UnaryOp: &
ID: m
UnaryOp: &
ID: x
UnaryOp: &
ID: y
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: r
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: m
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
ID: k
BinaryOp: <
ID: j
ID: m
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: ||
BinaryOp: ==
ArrayRef:
ID: r
ID: i
ArrayRef:
ID: a
ID: j
BinaryOp: &&
BinaryOp: >=
ArrayRef:
ID: r
ID: i
BinaryOp: -
ArrayRef:
ID: a
ID: j
ID: x
BinaryOp: <=
ArrayRef:
ID: r
ID: i
BinaryOp: +
ArrayRef:
ID: a
ID: j
ID: y
Compound:
Assignment: =
ArrayRef:
ID: r1
ID: b
BinaryOp: +
ID: i
Constant: 1
Assignment: =
ArrayRef:
ID: r2
ID: b
BinaryOp: +
ID: j
Constant: 1
UnaryOp: p++
ID: b
UnaryOp: p++
ID: k
Break:
If:
BinaryOp: ||
BinaryOp: ==
ID: n
Constant: 0
BinaryOp: ==
ID: m
Constant: 0
FuncCall:
ID: printf
ExprList:
Constant: "0"
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: k
For:
DeclList:
Decl: l
TypeDecl: l
IdentifierType: ['int']
BinaryOp: <
ID: i
ID: k
UnaryOp: p++
ID: l
FuncCall:
ID: printf
ExprList:
Constant: "%d %d"
ArrayRef:
ID: r1
ID: l
ArrayRef:
ID: r2
ID: l
Return:
Constant: 0
