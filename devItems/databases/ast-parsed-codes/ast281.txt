FileAST
Decl: arr
ArrayDecl:
TypeDecl: arr
IdentifierType: ['int']
Constant: 100
InitList:
Constant: 0
Decl: n
TypeDecl: n
IdentifierType: ['int']
FuncDef:
Decl: getMaxLessThan
FuncDecl:
ParamList:
Decl: upperLimit
TypeDecl: upperLimit
IdentifierType: ['int']
TypeDecl: getMaxLessThan
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: tmp
TypeDecl: tmp
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 1000
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
ID: i
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: >
ArrayRef:
ID: a
ID: i
ArrayRef:
ID: a
ID: j
Compound:
Assignment: =
ID: tmp
ArrayRef:
ID: arr
ID: i
Assignment: =
ArrayRef:
ID: arr
ID: i
ArrayRef:
ID: arr
ID: j
Assignment: =
ArrayRef:
ID: arr
ID: j
ID: tmp
Return:
ArrayRef:
ID: arr
BinaryOp: -
ID: n
Constant: 2
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: l
TypeDecl: l
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: tmp
TypeDecl: tmp
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d %d"
UnaryOp: &
ID: n
UnaryOp: &
ID: k
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d "
UnaryOp: &
ArrayRef:
ID: arr
ID: i
Assignment: =
ArrayRef:
ID: a
ID: i
ArrayRef:
ID: arr
ID: i
For:
Assignment: =
ID: i
BinaryOp: -
ID: n
Constant: 1
BinaryOp: >=
ID: n
ID: k
UnaryOp: p--
ID: i
Compound:
For:
Assignment: =
ID: j
Constant: 1
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: >
ArrayRef:
ID: a
BinaryOp: -
ID: j
Constant: 1
ArrayRef:
ID: a
ID: j
Compound:
Assignment: =
ID: tmp
ArrayRef:
ID: a
BinaryOp: -
ID: j
Constant: 1
Assignment: =
ArrayRef:
ID: a
BinaryOp: -
ID: j
Constant: 1
ArrayRef:
ID: a
ID: j
Assignment: =
ArrayRef:
ID: a
ID: j
ID: tmp
For:
Assignment: =
ID: l
Constant: 0
BinaryOp: <
ID: l
ID: k
UnaryOp: p++
ID: l
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d"
FuncCall:
ID: getMaxLessThan
ExprList:
ArrayRef:
ID: a
BinaryOp: -
ID: n
Constant: 1
Return:
Constant: 0
