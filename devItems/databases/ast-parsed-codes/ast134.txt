FileAST
FuncDef:
Decl: f
FuncDecl:
ParamList:
Decl: x
TypeDecl: x
IdentifierType: ['double']
TypeDecl: f
IdentifierType: ['double']
Compound:
Return:
BinaryOp: +
BinaryOp: *
UnaryOp: -
ID: x
ID: x
BinaryOp: *
Constant: 3
ID: x
FuncDef:
Decl: g
FuncDecl:
ParamList:
Decl: x
TypeDecl: x
IdentifierType: ['double']
TypeDecl: g
IdentifierType: ['double']
Compound:
Return:
BinaryOp: -
BinaryOp: -
BinaryOp: *
BinaryOp: *
BinaryOp: *
Constant: 2
ID: x
ID: x
ID: x
BinaryOp: *
ID: x
ID: x
BinaryOp: *
Constant: 5
ID: x
FuncDef:
Decl: mod
FuncDecl:
ParamList:
Decl: x
TypeDecl: x
IdentifierType: ['double']
TypeDecl: mod
IdentifierType: ['double']
Compound:
If:
BinaryOp: >
ID: x
Constant: 0
Compound:
Return:
ID: x
If:
BinaryOp: <
ID: x
Constant: 0
Compound:
Return:
UnaryOp: -
ID: x
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: a
TypeDecl: a
IdentifierType: ['double']
Decl: b
TypeDecl: b
IdentifierType: ['double']
Decl: c
TypeDecl: c
IdentifierType: ['double']
Decl: y
TypeDecl: y
IdentifierType: ['double']
Decl: area
TypeDecl: area
IdentifierType: ['double']
Decl: sum
TypeDecl: sum
IdentifierType: ['double']
Constant: 0
Decl: ic
TypeDecl: ic
IdentifierType: ['double']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%lf %lf"
UnaryOp: &
ID: a
UnaryOp: &
ID: b
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: c
BinaryOp: /
BinaryOp: -
ID: b
ID: a
ID: n
Assignment: =
ID: y
BinaryOp: *
BinaryOp: -
FuncCall:
ID: f
ExprList:
BinaryOp: +
ID: a
BinaryOp: *
ID: i
ID: c
FuncCall:
ID: g
ExprList:
BinaryOp: +
ID: a
ID: ic
ID: c
Assignment: =
ID: area
FuncCall:
ID: mod
ExprList:
ID: y
Assignment: =
ID: sum
BinaryOp: +
ID: sum
ID: area
FuncCall:
ID: printf
ExprList:
Constant: "%lf"
ID: sum
Return:
Constant: 0
