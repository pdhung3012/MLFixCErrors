FileAST
Decl: arr
ArrayDecl:
TypeDecl: arr
IdentifierType: ['int']
Constant: 100
InitList:
Constant: 0
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: w
TypeDecl: w
IdentifierType: ['int']
FuncDef:
Decl: getMaxLessThan
FuncDecl:
ParamList:
Decl: upperLimit
TypeDecl: upperLimit
IdentifierType: ['int']
TypeDecl: getMaxLessThan
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: upperLimiit
TypeDecl: upperLimiit
IdentifierType: ['int']
Decl: max
TypeDecl: max
IdentifierType: ['int']
ArrayRef:
ID: arr
Constant: 0
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: <
ID: max
ID: upperLimiit
Compound:
If:
BinaryOp: >
ArrayRef:
ID: arr
ID: i
ID: max
Assignment: =
ID: max
ArrayRef:
ID: arr
ID: i
Return:
ID: max
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: max
TypeDecl: max
IdentifierType: ['int']
Decl: x
TypeDecl: x
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d %d"
UnaryOp: &
ID: n
UnaryOp: &
ID: k
Decl: arr
ArrayDecl:
TypeDecl: arr
IdentifierType: ['int']
Constant: 100
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: arr
ID: i
Assignment: =
ID: max
ArrayRef:
ID: arr
Constant: 0
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: >
ArrayRef:
ID: arr
ID: i
ID: max
Compound:
Assignment: =
ID: max
ArrayRef:
ID: arr
ID: i
Compound:
Assignment: =
ID: max
ID: max
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
ID: k
UnaryOp: p++
ID: j
Compound:
Assignment: =
ID: x
FuncCall:
ID: getMaxLessThan
ExprList:
ID: max
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: x
Continue:
Return:
Constant: 0
