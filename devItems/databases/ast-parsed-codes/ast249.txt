FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: a
TypeDecl: a
IdentifierType: ['int']
Constant: 0
Decl: b
TypeDecl: b
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: s
ArrayDecl:
TypeDecl: s
IdentifierType: ['int']
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: s
ID: i
If:
BinaryOp: ||
Assignment: =
ID: i
Constant: 0
Assignment: =
ID: i
BinaryOp: -
ID: n
Constant: 1
Compound:
If:
BinaryOp: ||
BinaryOp: >
ArrayRef:
ID: s
Constant: 0
ArrayRef:
ID: s
Constant: 1
BinaryOp: >
ArrayRef:
ID: s
BinaryOp: -
ID: n
Constant: 1
ArrayRef:
ID: s
BinaryOp: -
ID: n
Constant: 2
UnaryOp: p++
ID: a
Compound:
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <
ID: i
BinaryOp: -
ID: n
Constant: 1
UnaryOp: p++
ID: i
If:
BinaryOp: &&
BinaryOp: >
ArrayRef:
ID: s
ID: i
ArrayRef:
ID: s
BinaryOp: -
ID: i
Constant: 1
BinaryOp: >
ArrayRef:
ID: s
ID: i
ArrayRef:
ID: s
BinaryOp: +
ID: i
Constant: 1
UnaryOp: p++
ID: b
If:
BinaryOp: &&
BinaryOp: ==
ID: a
Constant: 0
BinaryOp: ==
ID: b
Constant: 0
FuncCall:
ID: printf
ExprList:
Constant: "No"
FuncCall:
ID: printf
ExprList:
Constant: "Yes"
Return:
Constant: 0
