FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: n1
TypeDecl: n1
IdentifierType: ['int']
Decl: n2
TypeDecl: n2
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 20
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
Constant: 20
Decl: min
TypeDecl: min
IdentifierType: ['int']
Decl: C
TypeDecl: C
IdentifierType: ['int']
Constant: 0
Decl: c
TypeDecl: c
IdentifierType: ['int']
Assignment: =
ID: min
ArrayRef:
ID: a
Constant: 0
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n1
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n1
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
If:
BinaryOp: <=
ArrayRef:
ID: a
ID: i
ID: min
Assignment: =
ID: min
ArrayRef:
ID: a
ID: i
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
ID: n2
UnaryOp: p++
ID: j
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: b
ID: j
If:
BinaryOp: ==
ID: c
Constant: 0
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: min
FuncCall:
ID: printf
ExprList:
Constant: "NO"
Return:
Constant: 0
