FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: o
TypeDecl: o
IdentifierType: ['int']
Decl: n1
TypeDecl: n1
IdentifierType: ['int']
Decl: n2
TypeDecl: n2
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: p
TypeDecl: p
IdentifierType: ['int']
Decl: q
TypeDecl: q
IdentifierType: ['int']
Decl: min
TypeDecl: min
IdentifierType: ['int']
ID: o
Decl: a1
ArrayDecl:
TypeDecl: a1
IdentifierType: ['int']
Constant: 30
Decl: a2
ArrayDecl:
TypeDecl: a2
IdentifierType: ['int']
Constant: 30
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n1
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n1
Assignment: =
ID: i
BinaryOp: +
ID: i
Constant: 1
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a1
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n2
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n2
Assignment: =
ID: i
BinaryOp: +
ID: i
Constant: 1
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a2
ID: i
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
ID: n1
Assignment: =
ID: j
BinaryOp: +
ID: j
Constant: 1
Compound:
For:
Assignment: =
ID: k
ID: j
BinaryOp: <
ID: k
ID: n1
Assignment: =
ID: k
BinaryOp: +
ID: k
Constant: 1
Compound:
If:
BinaryOp: <
ArrayRef:
ID: a1
ID: k
ArrayRef:
ID: a1
ID: j
Compound:
Assignment: =
ID: min
ArrayRef:
ID: a1
ID: j
Assignment: =
ArrayRef:
ID: a1
ID: j
ArrayRef:
ID: a1
ID: k
Assignment: =
ArrayRef:
ID: a1
ID: k
ID: min
For:
Assignment: =
ID: p
Constant: 0
BinaryOp: <
ID: p
ID: n1
Assignment: =
ID: p
BinaryOp: +
ID: p
Constant: 1
Compound:
For:
Assignment: =
ID: q
Constant: 0
BinaryOp: <
ID: q
ID: n2
Assignment: =
ID: q
BinaryOp: +
ID: q
Constant: 1
Compound:
If:
BinaryOp: ==
ArrayRef:
ID: a1
ID: p
ArrayRef:
ID: a2
ID: q
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ArrayRef:
ID: a1
ID: p
Break:
Return:
Constant: 0
