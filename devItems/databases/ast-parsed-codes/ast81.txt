FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: count
TypeDecl: count
IdentifierType: ['int']
Constant: 0
Decl: sum
TypeDecl: sum
IdentifierType: ['int']
Constant: 0
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: mat
ArrayDecl:
TypeDecl: mat
IdentifierType: ['int']
ID: n
Decl: mat2
ArrayDecl:
TypeDecl: mat2
IdentifierType: ['int']
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: mat
ID: i
If:
BinaryOp: ==
ID: n
Constant: 1
Compound:
Assignment: =
ID: count
Constant: 0
FuncCall:
ID: printf
ExprList:
Constant: "%dn"
ID: count
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: count
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: count
Constant: 0
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: >
ArrayRef:
ID: mat
ID: i
ArrayRef:
ID: mat
ID: j
Compound:
Assignment: =
ID: count
BinaryOp: +
ID: count
Constant: 1
Assignment: =
ArrayRef:
ID: mat2
ID: i
ID: count
Assignment: =
ID: sum
BinaryOp: +
ID: sum
ID: count
FuncCall:
ID: printf
ExprList:
Constant: "%dn"
ID: sum
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
BinaryOp: -
ID: n
Constant: 1
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d "
ArrayRef:
ID: mat2
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ArrayRef:
ID: mat2
BinaryOp: -
ID: n
Constant: 1
Return:
Constant: 0
