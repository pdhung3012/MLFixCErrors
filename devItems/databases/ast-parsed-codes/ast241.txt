FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: flag
TypeDecl: flag
IdentifierType: ['int']
Constant: 0
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <=
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
Constant: 1
BinaryOp: <=
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
Decl: unit
TypeDecl: unit
IdentifierType: ['int']
If:
BinaryOp: ==
ID: i
ID: j
Compound:
If:
BinaryOp: !=
ID: unit
Constant: 1
Assignment: =
ID: flag
Constant: 1
Compound:
If:
BinaryOp: !=
ID: unit
Constant: 0
Assignment: =
ID: flag
Constant: 1
If:
BinaryOp: ==
ID: flag
Constant: 1
Break:
If:
BinaryOp: ==
ID: flag
Constant: 1
Break:
If:
BinaryOp: ==
ID: flag
Constant: 1
FuncCall:
ID: printf
ExprList:
Constant: "GIVEN %d * %d matrix is an IDENTITY MATRIX"
UnaryOp: &
ID: n
UnaryOp: &
ID: n
FuncCall:
ID: printf
ExprList:
Constant: "GIVEN %d * %d matrix is NOT an IDENTITY MATRIX"
UnaryOp: &
ID: n
UnaryOp: &
ID: n
Return:
Constant: 0
