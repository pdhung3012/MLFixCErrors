FileAST
Decl: arr
ArrayDecl:
TypeDecl: arr
IdentifierType: ['int']
Constant: 100
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: result
TypeDecl: result
IdentifierType: ['int']
FuncDef:
Decl: getMaxLessThan
FuncDecl:
ParamList:
Decl: upperLimit
TypeDecl: upperLimit
IdentifierType: ['int']
TypeDecl: getMaxLessThan
IdentifierType: ['int']
Compound:
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: >
ID: i
Constant: 0
UnaryOp: p--
ID: i
Compound:
If:
BinaryOp: <=
ArrayRef:
ID: arr
ID: i
ID: upperLimit
Compound:
Assignment: =
ID: result
ArrayRef:
ID: arr
ID: i
Compound:
Continue:
Return:
ID: result
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: temp
TypeDecl: temp
IdentifierType: ['int']
Decl: h
TypeDecl: h
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d %dn"
UnaryOp: &
ID: n
UnaryOp: &
ID: k
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d "
UnaryOp: &
ArrayRef:
ID: arr
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: <=
ArrayRef:
ID: arr
ID: i
ArrayRef:
ID: arr
ID: j
Compound:
Assignment: =
ID: temp
ArrayRef:
ID: arr
ID: i
Assignment: =
ArrayRef:
ID: arr
ID: i
ArrayRef:
ID: arr
ID: j
Assignment: =
ArrayRef:
ID: arr
ID: j
ID: temp
Compound:
Continue:
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: k
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d "
ArrayRef:
ID: arr
BinaryOp: -
BinaryOp: -
ID: n
ID: i
Constant: 1
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: k
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: h
FuncCall:
ID: getMaxLessThan
ExprList:
ArrayRef:
ID: arr
BinaryOp: -
BinaryOp: -
ID: n
ID: i
Constant: 1
FuncCall:
ID: printf
ExprList:
Constant: "%dn"
ID: h
Return:
Constant: 0
