FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: x
TypeDecl: x
IdentifierType: ['int']
Decl: y
TypeDecl: y
IdentifierType: ['int']
Decl: a
PtrDecl:
TypeDecl: a
IdentifierType: ['int']
Decl: b
PtrDecl:
TypeDecl: b
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: count
TypeDecl: count
IdentifierType: ['int']
Constant: 0
Decl: sold
PtrDecl:
TypeDecl: sold
IdentifierType: ['int']
Decl: vest
PtrDecl:
TypeDecl: vest
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d %d %d %d"
UnaryOp: &
ID: n
UnaryOp: &
ID: m
UnaryOp: &
ID: x
UnaryOp: &
ID: y
If:
BinaryOp: ||
UnaryOp: !
ID: n
UnaryOp: !
ID: m
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "0"
Return:
Constant: 0
Assignment: =
ID: a
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
ID: n
Constant: 4
Assignment: =
ID: b
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
ID: m
Constant: 4
Assignment: =
ID: sold
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
ID: n
Constant: 4
Assignment: =
ID: vest
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
ID: m
Constant: 4
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: ++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
BinaryOp: +
ID: a
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: m
UnaryOp: ++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
BinaryOp: +
ID: b
ID: i
For:
DeclList:
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
Decl: j
TypeDecl: j
IdentifierType: ['int']
Constant: 0
BinaryOp: &&
BinaryOp: <
ID: i
ID: n
BinaryOp: <
ID: j
ID: m
Compound:
If:
BinaryOp: >
UnaryOp: *
BinaryOp: +
ID: a
ID: i
BinaryOp: +
UnaryOp: *
BinaryOp: +
ID: b
ID: j
ID: y
UnaryOp: p++
ID: j
If:
BinaryOp: <
UnaryOp: *
BinaryOp: +
ID: a
ID: i
BinaryOp: -
UnaryOp: *
BinaryOp: +
ID: b
ID: j
ID: x
UnaryOp: p++
ID: i
Compound:
UnaryOp: p++
ID: count
Assignment: =
UnaryOp: *
BinaryOp: +
ID: sold
ID: k
UnaryOp: p++
ID: i
Assignment: =
UnaryOp: *
BinaryOp: +
ID: vest
UnaryOp: p++
ID: k
UnaryOp: p++
ID: j
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: count
Return:
Constant: 0
