FileAST
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: count
TypeDecl: count
IdentifierType: ['int']
Constant: 0
Decl: c
ArrayDecl:
ArrayDecl:
TypeDecl: c
IdentifierType: ['int']
Constant: 2
ID: n
FuncDef:
Decl: maxsold
FuncDecl:
ParamList:
Decl: a
PtrDecl:
TypeDecl: a
IdentifierType: ['int']
Decl: b
PtrDecl:
TypeDecl: b
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: x
TypeDecl: x
IdentifierType: ['int']
Decl: y
TypeDecl: y
IdentifierType: ['int']
TypeDecl: maxsold
IdentifierType: ['void']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: t
TypeDecl: t
IdentifierType: ['int']
Constant: 0
Decl: k
TypeDecl: k
IdentifierType: ['int']
Constant: 0
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
ID: t
BinaryOp: <
ID: j
ID: m
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: &&
BinaryOp: >=
ArrayRef:
ID: a
ID: i
BinaryOp: -
ArrayRef:
ID: b
ID: j
ID: x
BinaryOp: <=
ArrayRef:
ID: a
ID: i
BinaryOp: +
ArrayRef:
ID: b
ID: j
ID: y
Compound:
UnaryOp: p++
ID: count
Assignment: =
ArrayRef:
ArrayRef:
ID: c
ID: k
Constant: 0
BinaryOp: +
ID: i
Constant: 1
Assignment: =
ArrayRef:
ArrayRef:
ID: c
ID: k
Constant: 1
BinaryOp: +
ID: j
Constant: 1
UnaryOp: p++
ID: k
UnaryOp: p++
ID: t
Break:
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: x
TypeDecl: x
IdentifierType: ['int']
Decl: y
TypeDecl: y
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d %d %d"
UnaryOp: &
ID: m
UnaryOp: &
ID: x
UnaryOp: &
ID: y
Decl: reqvst
ArrayDecl:
TypeDecl: reqvst
IdentifierType: ['int']
ID: n
Decl: avlvst
ArrayDecl:
TypeDecl: avlvst
IdentifierType: ['int']
ID: m
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d "
UnaryOp: &
ArrayRef:
ID: reqvst
ID: i
If:
BinaryOp: ==
ID: i
ID: n
FuncCall:
ID: scanf
ExprList:
Constant: "''"
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: m
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d "
UnaryOp: &
ArrayRef:
ID: avlvst
ID: i
FuncCall:
ID: maxsold
ExprList:
ID: reqvst
ID: avlvst
ID: n
ID: m
ID: x
ID: y
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: count
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <=
ID: i
ID: count
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d %d"
ArrayRef:
ArrayRef:
ID: c
ID: i
Constant: 0
ArrayRef:
ArrayRef:
ID: c
ID: i
Constant: 1
Return:
Constant: 0
