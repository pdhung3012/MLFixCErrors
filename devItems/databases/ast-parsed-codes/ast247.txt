FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: t
TypeDecl: t
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: c
ArrayDecl:
TypeDecl: c
IdentifierType: ['int']
Constant: 20
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: c
ID: i
For:
Assignment: =
ID: k
Constant: 0
BinaryOp: <
ID: k
ID: t
UnaryOp: p++
ID: k
Compound:
If:
BinaryOp: &&
BinaryOp: !=
ID: k
Constant: 0
BinaryOp: !=
ID: k
BinaryOp: -
ID: n
Constant: 1
Compound:
If:
BinaryOp: &&
BinaryOp: >
ArrayRef:
ID: c
ID: k
ArrayRef:
ID: c
BinaryOp: -
ID: k
Constant: 1
BinaryOp: >
ArrayRef:
ID: c
ArrayRef:
ID: a
ID: k
ArrayRef:
ID: c
BinaryOp: +
ID: k
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Yesn"
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Non"
Compound:
If:
BinaryOp: ==
ID: k
Constant: 0
Compound:
If:
BinaryOp: &&
BinaryOp: ==
ID: k
Constant: 0
BinaryOp: >
ArrayRef:
ID: c
ID: k
ArrayRef:
ID: c
BinaryOp: +
ID: k
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Yesn"
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Non"
Compound:
If:
BinaryOp: &&
BinaryOp: ==
ID: k
BinaryOp: -
ID: n
Constant: 1
BinaryOp: >
ArrayRef:
ID: c
ID: k
ArrayRef:
ID: c
BinaryOp: -
ID: k
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Yesn"
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Non"
Return:
Constant: 0
