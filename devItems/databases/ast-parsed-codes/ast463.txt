FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: no_fauji
TypeDecl: no_fauji
IdentifierType: ['int']
Decl: no_pack
TypeDecl: no_pack
IdentifierType: ['int']
Decl: up
TypeDecl: up
IdentifierType: ['int']
Decl: down
TypeDecl: down
IdentifierType: ['int']
Decl: no_fuaji
TypeDecl: no_fuaji
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d %d %d %d"
UnaryOp: &
ID: no_fauji
UnaryOp: &
ID: no_pack
UnaryOp: &
ID: up
UnaryOp: &
ID: down
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: desired
PtrDecl:
TypeDecl: desired
IdentifierType: ['int']
Assignment: =
ID: desired
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
ID: no_fauji
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
BinaryOp: *
Constant: 2
ID: no_fuaji
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: ==
BinaryOp: %
ID: i
Constant: 2
Constant: 0
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: desired
BinaryOp: /
ID: i
Constant: 2
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: no_fauji
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ArrayRef:
ID: desired
ID: i
Decl: available
PtrDecl:
TypeDecl: available
IdentifierType: ['int']
Assignment: =
ID: available
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
ID: no_pack
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
BinaryOp: *
Constant: 2
ID: no_pack
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: ==
BinaryOp: %
ID: i
Constant: 2
Constant: 0
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: available
BinaryOp: /
ID: i
Constant: 2
Return:
Constant: 0
