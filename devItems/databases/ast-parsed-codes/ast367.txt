FileAST
FuncDef:
Decl: catalan
FuncDecl:
ParamList:
Decl: n
TypeDecl: n
IdentifierType: ['int']
TypeDecl: catalan
IdentifierType: ['int']
Compound:
Decl: a
TypeDecl: a
IdentifierType: ['int']
Assignment: =
ID: a
BinaryOp: *
Constant: 2
BinaryOp: -
BinaryOp: *
Constant: 2
ID: n
Constant: 1
If:
BinaryOp: ==
ID: n
Constant: 0
Return:
Constant: 1
Return:
BinaryOp: /
BinaryOp: *
ID: a
FuncCall:
ID: catalan
ExprList:
BinaryOp: -
ID: n
Constant: 1
BinaryOp: +
ID: n
Constant: 1
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: t
TypeDecl: t
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 100
Decl: i
TypeDecl: i
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: t
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
Compound:
For:
DeclList:
Decl: n
TypeDecl: n
IdentifierType: ['int']
BinaryOp: <
ID: n
Constant: 100
UnaryOp: p++
ID: n
Compound:
If:
Assignment: =
ArrayRef:
ID: a
ID: i
FuncCall:
ID: catalan
ExprList:
ID: n
FuncCall:
ID: printf
ExprList:
Constant: "%d"
FuncCall:
ID: catalan
ExprList:
ID: n
If:
BinaryOp: <
ArrayRef:
ID: a
ID: i
FuncCall:
ID: catalan
ExprList:
ID: n
FuncCall:
ID: printf
ExprList:
Constant: "%d"
FuncCall:
ID: catalan
ExprList:
BinaryOp: -
ID: n
Constant: 1
Return:
Constant: 0
