FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: c1
TypeDecl: c1
IdentifierType: ['int']
Constant: 0
Decl: c2
TypeDecl: c2
IdentifierType: ['int']
Constant: 0
Decl: c3
TypeDecl: c3
IdentifierType: ['int']
Constant: 0
Decl: l
TypeDecl: l
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 100
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
Constant: 100
Decl: c
ArrayDecl:
TypeDecl: c
IdentifierType: ['int']
Constant: 100
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: k
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
If:
BinaryOp: ==
BinaryOp: %
ArrayRef:
ID: a
ID: l
Constant: 2
Constant: 0
Compound:
Assignment: =
ArrayRef:
ID: b
ID: l
ArrayRef:
ID: a
ID: l
UnaryOp: p++
ID: c1
Compound:
Assignment: =
ArrayRef:
ID: c
ID: l
ArrayRef:
ID: a
ID: l
UnaryOp: p++
ID: c2
Decl: r
TypeDecl: r
IdentifierType: ['int']
For:
DeclList:
Decl: h
TypeDecl: h
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: h
ID: c1
UnaryOp: p++
ID: h
Compound:
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: j
ID: c2
UnaryOp: p++
ID: j
Compound:
Assignment: =
ID: r
BinaryOp: +
ArrayRef:
ID: b
ID: h
ArrayRef:
ID: c
ID: j
If:
BinaryOp: ==
ID: r
ID: k
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "lucky"
Return:
Constant: 0
FuncCall:
ID: printf
ExprList:
Constant: "unlucky"
Return:
Constant: 0
