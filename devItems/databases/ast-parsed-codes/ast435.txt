FileAST
FuncDef:
Decl: maxsol
FuncDecl:
ParamList:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: a
PtrDecl:
TypeDecl: a
IdentifierType: ['int']
Decl: b
PtrDecl:
TypeDecl: b
IdentifierType: ['int']
TypeDecl: maxsol
IdentifierType: ['int']
Compound:
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: n
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
ID: m
Decl: x
TypeDecl: x
IdentifierType: ['int']
Decl: y
TypeDecl: y
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d %d %d %d"
UnaryOp: &
ID: n
UnaryOp: &
ID: m
UnaryOp: &
ID: x
UnaryOp: &
ID: y
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d%c"
BinaryOp: +
ID: a
ID: i
TernaryOp:
BinaryOp: ==
ID: i
BinaryOp: -
ID: n
Constant: 1
Constant: '/'
Constant: ' '
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: m
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d%c"
BinaryOp: +
ID: b
ID: i
TernaryOp:
BinaryOp: ==
ID: i
BinaryOp: -
ID: m
Constant: 1
Constant: '/'
Constant: ' '
Return:
Constant: 0
