FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: a
TypeDecl: a
IdentifierType: ['double']
Decl: b
TypeDecl: b
IdentifierType: ['double']
Decl: len
TypeDecl: len
IdentifierType: ['double']
Decl: x
TypeDecl: x
IdentifierType: ['double']
Decl: y
TypeDecl: y
IdentifierType: ['double']
Decl: area
TypeDecl: area
IdentifierType: ['double']
Constant: 0
Decl: n
TypeDecl: n
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%lf"
UnaryOp: &
ID: a
FuncCall:
ID: scanf
ExprList:
Constant: "%lf"
UnaryOp: &
ID: b
Assignment: =
ID: x
ID: a
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: d
TypeDecl: d
IdentifierType: ['int']
While:
BinaryOp: <
ID: x
ID: b
Compound:
Assignment: =
ID: y
BinaryOp: +
ID: x
ID: d
If:
BinaryOp: <=
ID: x
UnaryOp: -
Constant: 1
Assignment: =
ID: area
BinaryOp: +
ID: area
ID: d
If:
BinaryOp: <
ID: x
Constant: 1
Assignment: =
ID: area
BinaryOp: +
ID: area
BinaryOp: *
BinaryOp: *
ID: x
ID: x
ID: d
Assignment: =
ID: area
BinaryOp: +
ID: area
BinaryOp: *
BinaryOp: *
BinaryOp: *
ID: x
ID: x
ID: x
ID: d
FuncCall:
ID: printf
ExprList:
Constant: "%lf"
ID: area
Return:
Constant: 0
