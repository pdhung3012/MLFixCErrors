FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: c
TypeDecl: c
IdentifierType: ['int']
Constant: 0
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: n
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
For:
DeclList:
Decl: k
TypeDecl: k
IdentifierType: ['int']
BinaryOp: <
ID: k
ID: n
UnaryOp: p++
ID: k
Compound:
If:
BinaryOp: >
ArrayRef:
ID: a
ID: j
ArrayRef:
ID: a
ID: k
Assignment: =
ID: c
BinaryOp: +
ID: c
Constant: 1
FuncCall:
ID: printf
ExprList:
Constant: "%dn"
ID: c
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
Decl: e
TypeDecl: e
IdentifierType: ['int']
Constant: 0
For:
Assignment: =
ID: k
BinaryOp: +
ID: j
Constant: 1
BinaryOp: <
ID: k
ID: n
UnaryOp: p++
ID: k
Compound:
If:
BinaryOp: >
ArrayRef:
ID: a
ID: j
ArrayRef:
ID: a
ID: k
Assignment: =
ID: e
BinaryOp: +
ID: e
Constant: 1
FuncCall:
ID: printf
ExprList:
Constant: "%d "
ID: e
Return:
Constant: 0
