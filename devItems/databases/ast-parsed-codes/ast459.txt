FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: x
TypeDecl: x
IdentifierType: ['int']
Decl: y
TypeDecl: y
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Constant: 0
Decl: count
TypeDecl: count
IdentifierType: ['int']
Constant: 0
Decl: k
TypeDecl: k
IdentifierType: ['int']
Constant: 0
FuncCall:
ID: scanf
ExprList:
Constant: "%d%d%d%d"
UnaryOp: &
ID: n
UnaryOp: &
ID: m
UnaryOp: &
ID: x
UnaryOp: &
ID: y
Decl: a
PtrDecl:
TypeDecl: a
IdentifierType: ['int']
Decl: b
PtrDecl:
TypeDecl: b
IdentifierType: ['int']
Decl: c
PtrDecl:
TypeDecl: c
IdentifierType: ['int']
Assignment: =
ID: a
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
ID: n
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
Assignment: =
ID: b
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
ID: m
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
Assignment: =
ID: c
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
BinaryOp: /
BinaryOp: *
Constant: 3
BinaryOp: +
ID: m
ID: n
Constant: 2
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
BinaryOp: +
ID: a
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: m
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
BinaryOp: +
ID: b
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: &&
BinaryOp: <
ID: i
ID: n
BinaryOp: <
ID: j
ID: m
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: <
BinaryOp: +
ArrayRef:
ID: a
ID: i
ID: y
ArrayRef:
ID: b
ID: j
UnaryOp: p++
ID: i
If:
BinaryOp: &&
BinaryOp: <=
BinaryOp: -
ArrayRef:
ID: a
ID: i
ID: x
ArrayRef:
ID: b
ID: j
BinaryOp: >=
BinaryOp: +
ArrayRef:
ID: a
ID: i
ID: y
ArrayRef:
ID: b
ID: j
Compound:
UnaryOp: p++
ID: count
Assignment: =
ArrayRef:
ID: c
ID: k
BinaryOp: +
ID: i
Constant: 1
Assignment: =
ArrayRef:
ID: c
BinaryOp: +
ID: k
Constant: 1
BinaryOp: +
ID: j
Constant: 1
Assignment: =
ID: k
BinaryOp: +
ID: k
Constant: 2
UnaryOp: p++
ID: j
Decl: str
ArrayDecl:
TypeDecl: str
IdentifierType: ['int']
ID: k
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: count
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: k
Assignment: =
ID: i
BinaryOp: +
ID: i
Constant: 2
FuncCall:
ID: printf
ExprList:
Constant: "%d %d"
ArrayRef:
ID: c
ID: i
ArrayRef:
ID: c
BinaryOp: +
ID: i
Constant: 1
Return:
Constant: 0
