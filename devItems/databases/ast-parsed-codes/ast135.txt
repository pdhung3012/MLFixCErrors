FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: a
TypeDecl: a
IdentifierType: ['double']
Decl: b
TypeDecl: b
IdentifierType: ['double']
Decl: area
TypeDecl: area
IdentifierType: ['double']
Constant: 0.0
Decl: d
TypeDecl: d
IdentifierType: ['double']
Decl: l
TypeDecl: l
IdentifierType: ['double']
Decl: n
TypeDecl: n
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: k
TypeDecl: k
IdentifierType: ['int']
ID: n
Decl: c
ArrayDecl:
TypeDecl: c
IdentifierType: ['double']
ID: k
Assignment: =
ID: d
BinaryOp: /
BinaryOp: -
ID: b
ID: a
ID: n
Assignment: =
ArrayRef:
ID: c
Constant: 0
ID: a
Assignment: =
ArrayRef:
ID: c
BinaryOp: -
ID: n
Constant: 1
ID: b
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <
ID: i
BinaryOp: -
ID: n
Constant: 1
UnaryOp: p++
ID: i
Compound:
Assignment: =
ArrayRef:
ID: a
ID: i
BinaryOp: +
ArrayRef:
ID: a
BinaryOp: -
ID: i
Constant: 1
ID: d
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: l
BinaryOp: *
BinaryOp: *
Constant: 2.0
ArrayRef:
ID: a
ID: i
BinaryOp: -
BinaryOp: *
ArrayRef:
ID: a
ID: i
ArrayRef:
ID: a
ID: i
Constant: 4.0
If:
BinaryOp: <
ID: l
Constant: 0
Assignment: =
ID: l
UnaryOp: -
ID: l
Assignment: =
ID: area
BinaryOp: +
ID: area
ID: l
FuncCall:
ID: printf
ExprList:
Constant: "%lf"
ID: area
Return:
Constant: 0
