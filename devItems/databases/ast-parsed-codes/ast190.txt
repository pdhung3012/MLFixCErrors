FileAST
Decl: perfect
FuncDecl:
ParamList:
Typename: None
TypeDecl: None
IdentifierType: ['int']
TypeDecl: perfect
IdentifierType: ['int']
Decl: isprime
FuncDecl:
ParamList:
Typename: None
TypeDecl: None
IdentifierType: ['int']
TypeDecl: isprime
IdentifierType: ['int']
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
If:
FuncCall:
ID: perfect
ExprList:
ID: n
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "YES"
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "NO"
Return:
Constant: 0
FuncDef:
Decl: isprime
FuncDecl:
ParamList:
Decl: x
TypeDecl: x
IdentifierType: ['int']
TypeDecl: isprime
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
For:
Assignment: =
ID: i
Constant: 2
BinaryOp: <
BinaryOp: *
ID: i
ID: i
ID: x
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: ==
BinaryOp: %
ID: x
ID: i
Constant: 0
Compound:
Return:
Constant: 0
Return:
Constant: 1
FuncDef:
Decl: perfect
FuncDecl:
ParamList:
Decl: y
TypeDecl: y
IdentifierType: ['int']
TypeDecl: perfect
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: sum
TypeDecl: sum
IdentifierType: ['int']
Constant: 0
Decl: n
TypeDecl: n
IdentifierType: ['int']
For:
Assignment: =
ID: i
Constant: 2
BinaryOp: <=
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: &&
FuncCall:
ID: isprime
ExprList:
ID: i
BinaryOp: ==
BinaryOp: %
ID: y
ID: i
Constant: 0
Compound:
Assignment: =
ID: sum
BinaryOp: +
ID: sum
ID: i
If:
BinaryOp: ==
ID: sum
ID: y
Compound:
Return:
Constant: 1
Compound:
Return:
Constant: 0
