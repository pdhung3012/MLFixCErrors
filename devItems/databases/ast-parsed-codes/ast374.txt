FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: a1
ArrayDecl:
TypeDecl: a1
IdentifierType: ['int']
Constant: 20
Decl: a2
ArrayDecl:
TypeDecl: a2
IdentifierType: ['int']
Constant: 20
Decl: n1
TypeDecl: n1
IdentifierType: ['int']
Decl: n2
TypeDecl: n2
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: flag
TypeDecl: flag
IdentifierType: ['int']
Constant: 0
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 20
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n1
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n1
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a1
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n2
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n2
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a2
ID: i
Assignment: =
ID: m
ArrayRef:
ID: a1
Constant: 0
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n1
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
ID: n2
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: ==
ArrayRef:
ID: a1
ID: i
ArrayRef:
ID: a2
ID: j
Compound:
If:
BinaryOp: ==
ID: i
Constant: 0
Compound:
Assignment: =
ID: flag
Constant: 1
Break:
If:
BinaryOp: ==
ID: j
BinaryOp: -
ID: n2
Constant: 1
Compound:
If:
Assignment: =
ID: m
BinaryOp: &&
ArrayRef:
ID: a1
Constant: 0
BinaryOp: ==
ID: flag
Constant: 1
Assignment: =
ID: m
ArrayRef:
ID: a
ID: i
If:
BinaryOp: <
ArrayRef:
ID: a
ID: i
ID: m
Assignment: =
ID: m
ArrayRef:
ID: a1
ID: i
If:
BinaryOp: &&
BinaryOp: ==
ID: m
ArrayRef:
ID: a1
Constant: 0
BinaryOp: ==
ID: flag
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "NO"
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: m
Return:
Constant: 0
