FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: p
TypeDecl: p
IdentifierType: ['int']
Decl: e
TypeDecl: e
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%dn"
UnaryOp: &
ID: n
Assignment: =
ID: p
Constant: 1
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <=
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
Constant: 1
BinaryOp: <=
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d "
UnaryOp: &
ID: m
If:
BinaryOp: ||
BinaryOp: &&
BinaryOp: ==
ID: i
ID: j
BinaryOp: !=
ID: m
Constant: 1
BinaryOp: &&
BinaryOp: !=
ID: i
ID: j
BinaryOp: !=
ID: m
Constant: 0
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "GIVEN %d x %d matrix is NOT an IDENTITY MATRIX"
ID: n
ID: n
Assignment: =
ID: p
Constant: 0
Break:
FuncCall:
ID: scanf
ExprList:
Constant: "n"
If:
BinaryOp: ==
ID: e
Constant: 0
Break:
If:
BinaryOp: ==
ID: p
Constant: 1
FuncCall:
ID: printf
ExprList:
Constant: "GIVEN %d x %d matrix is an IDENTITY MATRIX"
ID: n
ID: n
Return:
Constant: 0
