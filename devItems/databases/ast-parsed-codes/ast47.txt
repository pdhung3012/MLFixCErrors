FileAST
FuncDef:
Decl: hanoi
FuncDecl:
ParamList:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: a
TypeDecl: a
IdentifierType: ['char']
Decl: b
TypeDecl: b
IdentifierType: ['char']
Decl: c
TypeDecl: c
IdentifierType: ['char']
TypeDecl: hanoi
IdentifierType: ['int']
Compound:
Decl: k
TypeDecl: k
IdentifierType: ['int']
If:
BinaryOp: >
ID: n
Constant: 0
Compound:
FuncCall:
ID: hanoi
ExprList:
BinaryOp: -
ID: n
Constant: 1
ID: a
ID: c
ID: b
FuncCall:
ID: hanoi
ExprList:
BinaryOp: -
ID: n
Constant: 1
ID: c
ID: b
ID: a
Return:
ID: k
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: t
TypeDecl: t
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 10
Decl: j
TypeDecl: j
IdentifierType: ['int']
Constant: 1
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
Constant: 30
Decl: k
TypeDecl: k
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: t
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
Constant: 30
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: k
Constant: 0
Assignment: =
ArrayRef:
ID: b
ID: i
FuncCall:
ID: hanoi
ExprList:
ID: j
Constant: 'a'
Constant: 'b'
Constant: 'c'
UnaryOp: p++
ID: j
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
Constant: 30
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: ==
ArrayRef:
ID: b
ID: j
ArrayRef:
ID: a
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "yesn"
FuncCall:
ID: printf
ExprList:
Constant: "non"
Return:
Constant: 0
