FileAST
FuncDef:
Decl: fact
FuncDecl:
ParamList:
Decl: a
TypeDecl: a
IdentifierType: ['int']
TypeDecl: fact
IdentifierType: ['int']
Compound:
Decl: f
TypeDecl: f
IdentifierType: ['int']
Constant: 1
Decl: i
TypeDecl: i
IdentifierType: ['int']
If:
BinaryOp: ==
ID: a
Constant: 0
Compound:
Assignment: =
ID: f
Constant: 1
Compound:
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <=
ID: i
ID: a
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: f
BinaryOp: *
ID: f
ID: i
Return:
ID: f
FuncDef:
Decl: catalan
FuncDecl:
ParamList:
Decl: a
TypeDecl: a
IdentifierType: ['int']
TypeDecl: catalan
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: s
TypeDecl: s
IdentifierType: ['int']
BinaryOp: /
FuncCall:
ID: fact
ExprList:
BinaryOp: *
Constant: 2
ID: a
BinaryOp: *
FuncCall:
ID: fact
ExprList:
BinaryOp: +
ID: a
Constant: 1
FuncCall:
ID: fact
ExprList:
ID: a
Return:
Assignment: =
ID: s
BinaryOp: +
ID: s
FuncCall:
ID: catalan
ExprList:
BinaryOp: -
ID: i
Constant: 1
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: t
TypeDecl: t
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: t
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: h
TypeDecl: h
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: t
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: h
FuncCall:
ID: catalan
ExprList:
ArrayRef:
ID: a
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: h
Return:
Constant: 0
