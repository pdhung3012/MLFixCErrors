FileAST
FuncDef:
Decl: find
FuncDecl:
ParamList:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: t
ArrayDecl:
TypeDecl: t
IdentifierType: ['int']
BinaryOp: ^
Constant: 10
Constant: 5
TypeDecl: find
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
Decl: j
TypeDecl: j
IdentifierType: ['int']
Constant: 0
Decl: k
TypeDecl: k
IdentifierType: ['int']
Constant: 1
Decl: p
TypeDecl: p
IdentifierType: ['int']
ID: n
Decl: ali
TypeDecl: ali
IdentifierType: ['int']
Constant: 0
Decl: bob
TypeDecl: bob
IdentifierType: ['int']
Constant: 0
While:
BinaryOp: !=
BinaryOp: +
ID: ali
ID: bob
ID: n
Compound:
If:
BinaryOp: ==
ID: i
ArrayRef:
ID: t
ID: k
Compound:
UnaryOp: p++
ID: ali
Assignment: =
ID: i
Constant: 0
UnaryOp: p++
ID: k
If:
BinaryOp: ==
BinaryOp: +
ID: ali
ID: bob
ID: n
Break:
If:
BinaryOp: ==
ID: j
ArrayRef:
ID: t
ID: p
Compound:
UnaryOp: p++
ID: bob
Assignment: =
ID: j
Constant: 0
UnaryOp: p--
ID: p
If:
BinaryOp: ==
BinaryOp: +
ID: ali
ID: bob
ID: n
Break:
UnaryOp: p++
ID: i
UnaryOp: p++
ID: j
Return:
ID: ali
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: t
ArrayDecl:
TypeDecl: t
IdentifierType: ['int']
BinaryOp: ^
Constant: 10
Constant: 5
Decl: i
TypeDecl: i
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <=
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: t
ID: i
FuncCall:
ID: find
ExprList:
ID: n
ID: t
Decl: ali
TypeDecl: ali
IdentifierType: ['int']
FuncCall:
ID: printf
ExprList:
Constant: "%d %d"
ID: ali
BinaryOp: -
ID: n
ID: ali
Return:
Constant: 0
