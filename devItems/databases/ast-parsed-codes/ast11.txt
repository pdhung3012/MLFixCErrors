FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: util
TypeDecl: util
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: k
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: occ
ArrayDecl:
TypeDecl: occ
IdentifierType: ['int']
Constant: 500
Decl: count
TypeDecl: count
IdentifierType: ['int']
Constant: 0
Assignment: =
ID: i
Constant: 0
For:
ID: i
BinaryOp: <=
ID: i
Constant: 499
UnaryOp: p++
ID: i
Compound:
Assignment: =
ArrayRef:
ID: occ
ID: i
Constant: 0
Assignment: =
ID: i
Constant: 1
For:
ID: i
BinaryOp: <=
ID: i
Constant: 7
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: &&
BinaryOp: >=
ID: util
Constant: 0
BinaryOp: <=
ID: util
Constant: 499
Compound:
UnaryOp: p++
ArrayRef:
ID: occ
ID: util
Assignment: =
ID: i
Constant: 0
For:
ID: i
BinaryOp: <=
ID: i
Constant: 499
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: >=
BinaryOp: -
ID: k
ID: i
Constant: 0
Compound:
If:
BinaryOp: >=
BinaryOp: +
ArrayRef:
ID: occ
ID: i
ArrayRef:
ID: occ
BinaryOp: -
ID: k
ID: i
Constant: 2
Compound:
Assignment: =
ID: count
Constant: 1
If:
BinaryOp: ==
ID: count
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "lucky"
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "unlucky"
