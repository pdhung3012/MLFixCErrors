FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: q
TypeDecl: q
IdentifierType: ['int']
Decl: p
TypeDecl: p
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: m
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: m
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
ID: m
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: ==
ID: i
ID: j
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: q
If:
BinaryOp: !=
ID: i
ID: j
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: p
If:
BinaryOp: &&
BinaryOp: ==
ID: q
Constant: 1
BinaryOp: ==
ID: p
Constant: 0
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "GIVEN %dx%d matrix is an IDENTITY MATRIX"
ID: n
ID: n
Return:
Constant: 0
