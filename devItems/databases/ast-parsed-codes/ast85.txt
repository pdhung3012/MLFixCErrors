FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 1000
Decl: count
ArrayDecl:
TypeDecl: count
IdentifierType: ['int']
Constant: 1000
Decl: sum
TypeDecl: sum
IdentifierType: ['int']
Constant: 0
Decl: i
TypeDecl: i
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
Assignment: =
ArrayRef:
ID: count
ID: i
Constant: 0
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: >
ArrayRef:
ID: a
ID: i
ArrayRef:
ID: a
ID: j
Compound:
UnaryOp: p++
ArrayRef:
ID: count
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: sum
BinaryOp: +
ID: sum
ArrayRef:
ID: count
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "%dn"
ID: sum
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d "
ArrayRef:
ID: count
ID: i
Return:
Constant: 0
