FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 1000
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
Constant: 1000
Decl: sum
TypeDecl: sum
IdentifierType: ['int']
Constant: 0
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: j
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
Decl: count
TypeDecl: count
IdentifierType: ['int']
Constant: 0
For:
Assignment: =
ID: k
BinaryOp: +
ID: j
Constant: 1
BinaryOp: <
ID: k
ID: n
UnaryOp: p++
ID: k
Compound:
If:
BinaryOp: >
ArrayRef:
ID: a
ID: j
ArrayRef:
ID: a
ID: k
Assignment: =
ID: count
BinaryOp: +
ID: count
Constant: 1
Assignment: =
ArrayRef:
ID: b
ID: j
ID: count
Assignment: =
ID: sum
BinaryOp: +
ID: sum
ID: count
FuncCall:
ID: printf
ExprList:
Constant: "%dn"
ID: sum
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
FuncCall:
ID: printf
ExprList:
Constant: "%d "
ArrayRef:
ID: b
ID: j
Return:
Constant: 0
