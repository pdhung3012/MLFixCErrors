FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n1
TypeDecl: n1
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n1
Decl: a1
ArrayDecl:
TypeDecl: a1
IdentifierType: ['int']
ID: n1
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: n1
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n1
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a1
ID: i
Decl: n2
TypeDecl: n2
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n2
Decl: a2
ArrayDecl:
TypeDecl: a2
IdentifierType: ['int']
ID: n2
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n2
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a2
ID: i
Decl: frequency
ArrayDecl:
TypeDecl: frequency
IdentifierType: ['int']
ID: n1
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n1
UnaryOp: p++
ID: i
Compound:
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: j
ID: n2
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: ==
ArrayRef:
ID: a1
ID: i
ArrayRef:
ID: a2
ID: j
UnaryOp: p++
ArrayRef:
ID: frequency
ID: i
Decl: firstmin
TypeDecl: firstmin
IdentifierType: ['int']
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n1
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: ==
ArrayRef:
ID: frequency
ID: i
Constant: 0
Compound:
Assignment: =
ID: firstmin
ArrayRef:
ID: a1
ID: i
Break:
Decl: min
TypeDecl: min
IdentifierType: ['int']
ID: firstmin
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n1
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: &&
BinaryOp: ==
ArrayRef:
ID: frequency
ID: i
Constant: 0
BinaryOp: <=
ArrayRef:
ID: a1
ID: i
ID: min
Assignment: =
ID: min
ArrayRef:
ID: a1
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: min
Return:
Constant: 0
