FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: l
TypeDecl: l
IdentifierType: ['int']
Decl: o
TypeDecl: o
IdentifierType: ['int']
Decl: x
TypeDecl: x
IdentifierType: ['int']
Decl: y
TypeDecl: y
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Constant: 0
Decl: s
TypeDecl: s
IdentifierType: ['int']
Constant: 0
Decl: sum
TypeDecl: sum
IdentifierType: ['int']
Constant: 0
FuncCall:
ID: scanf
ExprList:
Constant: "%d%d%d%d"
UnaryOp: &
ID: l
UnaryOp: &
ID: o
UnaryOp: &
ID: x
UnaryOp: &
ID: y
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: l
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
ID: o
Decl: p
ArrayDecl:
TypeDecl: p
IdentifierType: ['int']
ID: o
Decl: q
ArrayDecl:
TypeDecl: q
IdentifierType: ['int']
ID: l
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: l
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
BinaryOp: +
ID: a
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: o
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
BinaryOp: +
ID: b
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: o
Compound:
If:
BinaryOp: &&
BinaryOp: >=
ArrayRef:
ID: b
ID: i
BinaryOp: -
ArrayRef:
ID: a
ID: j
ID: x
BinaryOp: <=
ArrayRef:
ID: b
ID: i
BinaryOp: +
ArrayRef:
ID: a
ID: j
ID: y
Compound:
Assignment: =
ArrayRef:
ID: p
ID: s
BinaryOp: +
ID: j
Constant: 1
Assignment: =
ArrayRef:
ID: q
ID: s
BinaryOp: +
ID: i
Constant: 1
UnaryOp: p++
ID: i
UnaryOp: p++
ID: j
UnaryOp: p++
ID: s
UnaryOp: p++
ID: sum
If:
BinaryOp: <
ArrayRef:
ID: b
ID: i
BinaryOp: -
ArrayRef:
ID: a
ID: j
ID: x
Compound:
UnaryOp: p++
ID: i
If:
BinaryOp: >
ArrayRef:
ID: b
ID: i
BinaryOp: +
ArrayRef:
ID: a
ID: i
ID: y
Compound:
UnaryOp: p++
ID: j
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: sum
Decl: k
TypeDecl: k
IdentifierType: ['int']
For:
Assignment: =
ID: s
Constant: 0
BinaryOp: <
ID: k
ID: sum
UnaryOp: p++
ID: k
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d %d"
ArrayRef:
ID: p
ID: s
ArrayRef:
ID: q
ID: s
Return:
Constant: 0
