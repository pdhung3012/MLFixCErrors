FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: arr
ArrayDecl:
TypeDecl: arr
IdentifierType: ['int']
Constant: 100
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: l
TypeDecl: l
IdentifierType: ['int']
Decl: tag
TypeDecl: tag
IdentifierType: ['int']
Decl: flag
TypeDecl: flag
IdentifierType: ['int']
Constant: 0
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 100
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: l
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
ArrayRef:
ID: arr
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: <
ArrayRef:
ID: a
ID: i
ID: l
Compound:
Assignment: =
ID: l
BinaryOp: -
ID: l
ArrayRef:
ID: arr
ID: i
Assignment: =
ID: tag
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
If:
Assignment: =
ID: i
ID: tag
Continue:
If:
Assignment: =
ArrayRef:
ID: arr
ID: i
ID: l
Compound:
Assignment: =
ID: tag
Constant: 1
Break:
If:
BinaryOp: ==
ID: tag
Constant: 1
FuncCall:
ID: printf
ExprList:
Constant: "lucky"
FuncCall:
ID: printf
ExprList:
Constant: "unlucky"
Return:
Constant: 0
