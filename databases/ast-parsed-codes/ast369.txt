FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n1
TypeDecl: n1
IdentifierType: ['int']
Decl: n2
TypeDecl: n2
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 20
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
Constant: 20
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: z
TypeDecl: z
IdentifierType: ['int']
ArrayRef:
ID: a
Constant: 0
Decl: c
TypeDecl: c
IdentifierType: ['int']
Decl: d
TypeDecl: d
IdentifierType: ['int']
Constant: 0
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n1
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n1
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n2
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n2
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: b
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n1
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: c
Constant: 0
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: <
ID: j
ID: n2
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: ==
ArrayRef:
ID: a
ID: i
ArrayRef:
ID: b
ID: j
Compound:
Assignment: =
ID: c
BinaryOp: +
ID: c
Constant: 1
If:
BinaryOp: &&
BinaryOp: ==
ID: c
Constant: 0
BinaryOp: <
ArrayRef:
ID: a
ID: i
ID: z
Compound:
Assignment: =
ID: z
ArrayRef:
ID: a
ID: i
Assignment: =
ID: d
BinaryOp: +
ID: d
Constant: 1
If:
BinaryOp: !=
ID: d
Constant: 0
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: z
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "NO"
Return:
Constant: 0
