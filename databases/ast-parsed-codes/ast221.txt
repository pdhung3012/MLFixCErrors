FileAST
Decl: arr
ArrayDecl:
TypeDecl: arr
IdentifierType: ['int']
Constant: 100
InitList:
Constant: 0
Decl: n
TypeDecl: n
IdentifierType: ['int']
FuncDef:
Decl: getMaxLessThan
FuncDecl:
ParamList:
Decl: upperLimit
TypeDecl: upperLimit
IdentifierType: ['int']
TypeDecl: getMaxLessThan
IdentifierType: ['int']
Compound:
Decl: t
TypeDecl: t
IdentifierType: ['int']
Constant: 0
Decl: c
ArrayDecl:
TypeDecl: c
IdentifierType: ['int']
ID: n
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: n
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: &&
BinaryOp: <
ArrayRef:
ID: a
ID: i
ID: upperLimit
BinaryOp: >
ArrayRef:
ID: arr
ID: i
ID: t
Assignment: =
ID: t
ArrayRef:
ID: arr
ID: i
Assignment: =
ID: t
ArrayRef:
ID: c
ID: i
UnaryOp: p++
ID: i
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: k
TypeDecl: k
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d%d"
UnaryOp: &
ID: n
UnaryOp: &
ID: k
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: arr
ID: i
Decl: max
TypeDecl: max
IdentifierType: ['int']
ArrayRef:
ID: arr
Constant: 0
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: >
ArrayRef:
ID: arr
ID: i
ID: max
Assignment: =
ID: max
ArrayRef:
ID: arr
ID: i
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
ID: n
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: k
UnaryOp: p++
ID: i
Compound:
Assignment: =
ArrayRef:
ID: b
ID: i
FuncCall:
ID: getMaxLessThan
ExprList:
ID: max
Assignment: =
ID: max
ArrayRef:
ID: b
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ArrayRef:
ID: b
ID: i
Return:
Constant: 0
