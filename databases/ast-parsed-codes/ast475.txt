FileAST
FuncDef:
Decl: printout
FuncDecl:
ParamList:
Decl: a
TypeDecl: a
IdentifierType: ['int']
Decl: l
TypeDecl: l
IdentifierType: ['int']
TypeDecl: printout
IdentifierType: ['void']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Assignment: =
ID: a
BinaryOp: %
ID: a
Constant: 10
For:
BinaryOp: <
ID: i
BinaryOp: +
ID: a
ID: l
Assignment: =
ID: i
BinaryOp: +
ID: i
Constant: 1
Compound:
Assignment: =
ID: i
BinaryOp: %
ID: i
Constant: 10
FuncCall:
ID: printf
ExprList:
Constant: "%d"
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: h
TypeDecl: h
IdentifierType: ['int']
Decl: b
TypeDecl: b
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d,%d"
UnaryOp: &
ID: h
UnaryOp: &
ID: b
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <
ID: i
BinaryOp: +
ID: h
Constant: 1
Assignment: =
ID: i
BinaryOp: +
ID: i
Constant: 1
Compound:
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
BinaryOp: -
ID: b
ID: i
Assignment: =
ID: j
BinaryOp: +
ID: j
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: " "
FuncCall:
ID: printout
ExprList:
ID: i
BinaryOp: +
BinaryOp: -
ID: b
BinaryOp: *
Constant: 2
ID: h
BinaryOp: *
Constant: 2
ID: i
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
BinaryOp: -
ID: b
ID: i
Assignment: =
ID: j
BinaryOp: +
ID: j
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: " "
FuncCall:
ID: printf
ExprList:
Constant: ""
Return:
Constant: 0
