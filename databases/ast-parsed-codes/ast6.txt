FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: t
TypeDecl: t
IdentifierType: ['int']
Decl: num
ArrayDecl:
TypeDecl: num
IdentifierType: ['int']
Constant: 1500
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: d
TypeDecl: d
IdentifierType: ['int']
Constant: 0
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: k
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: num
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
BinaryOp: -
ID: n
Constant: 1
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: t
BinaryOp: -
ID: k
ArrayRef:
ID: num
ID: i
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: ==
ID: t
ArrayRef:
ID: num
ID: j
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "lucky"
Assignment: =
ID: d
Constant: 1
Break:
If:
BinaryOp: ==
ID: d
Constant: 1
Compound:
Break:
If:
BinaryOp: ==
ID: d
Constant: 0
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "unlucky"
Return:
Constant: 0
