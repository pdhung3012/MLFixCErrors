FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['long', 'int']
Decl: m
TypeDecl: m
IdentifierType: ['long', 'int']
Decl: x
TypeDecl: x
IdentifierType: ['long', 'int']
Decl: y
TypeDecl: y
IdentifierType: ['long', 'int']
Decl: temp
TypeDecl: temp
IdentifierType: ['long', 'int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: k
TypeDecl: k
IdentifierType: ['int']
Constant: 0
FuncCall:
ID: scanf
ExprList:
Constant: "%ld%ld%ld%ld"
UnaryOp: &
ID: n
UnaryOp: &
ID: m
UnaryOp: &
ID: x
UnaryOp: &
ID: y
Decl: a
PtrDecl:
TypeDecl: a
IdentifierType: ['int']
Decl: b
PtrDecl:
TypeDecl: b
IdentifierType: ['int']
Decl: u
PtrDecl:
TypeDecl: u
IdentifierType: ['int']
Decl: v
PtrDecl:
TypeDecl: v
IdentifierType: ['int']
Assignment: =
ID: a
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
ID: n
Assignment: =
ID: b
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
ID: m
Assignment: =
ID: u
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
ID: m
Assignment: =
ID: v
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
ID: m
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
EmptyStatement:
FuncCall:
ID: scanf
ExprList:
Constant: "%ld"
UnaryOp: &
ArrayRef:
ID: a
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: m
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%ld"
UnaryOp: &
ArrayRef:
ID: b
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
ID: temp
BinaryOp: <
ID: j
ID: m
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: &&
BinaryOp: &&
BinaryOp: >=
ArrayRef:
ID: b
ID: j
BinaryOp: -
ArrayRef:
ID: a
ID: i
ID: x
BinaryOp: <=
ArrayRef:
ID: b
ID: j
BinaryOp: +
ArrayRef:
ID: a
ID: i
ID: y
BinaryOp: !=
ArrayRef:
ID: b
ID: i
Constant: 0
Compound:
Assignment: =
ArrayRef:
ID: u
ID: k
BinaryOp: +
ID: i
Constant: 1
Assignment: =
ArrayRef:
ID: v
ID: k
BinaryOp: +
ID: j
Constant: 1
UnaryOp: p++
ID: k
Break:
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: k
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: k
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d %d"
ArrayRef:
ID: u
ID: i
ArrayRef:
ID: v
ID: i
Return:
Constant: 0
