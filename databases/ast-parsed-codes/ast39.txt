FileAST
FuncDef:
Decl: hanoi
FuncDecl:
ParamList:
Decl: n
TypeDecl: n
IdentifierType: ['int']
TypeDecl: hanoi
IdentifierType: ['int']
Compound:
If:
BinaryOp: ==
ID: n
Constant: 0
Return:
Constant: 0
Return:
BinaryOp: +
BinaryOp: *
Constant: 2
FuncCall:
ID: hanoi
ExprList:
BinaryOp: -
ID: n
Constant: 1
Constant: 1
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: t
TypeDecl: t
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: str
ArrayDecl:
TypeDecl: str
IdentifierType: ['int']
Constant: 1000
Decl: a
TypeDecl: a
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: t
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
Constant: 1000
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: <=
FuncCall:
ID: hanoi
ExprList:
ID: i
Constant: 5000000
Assignment: =
ArrayRef:
ID: str
ID: i
FuncCall:
ID: hanoi
ExprList:
ID: i
Break:
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
Constant: 1000
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: ==
ID: a
Constant: 1
FuncCall:
ID: printf
ExprList:
Constant: "yesn"
FuncCall:
ID: printf
ExprList:
Constant: "non"
Return:
Constant: 0
