FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: sol
ArrayDecl:
TypeDecl: sol
IdentifierType: ['int']
Constant: 1000
Decl: vest
ArrayDecl:
TypeDecl: vest
IdentifierType: ['int']
Constant: 1000
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: u
TypeDecl: u
IdentifierType: ['int']
Constant: 0
Decl: v
TypeDecl: v
IdentifierType: ['int']
Constant: 0
Decl: l
TypeDecl: l
IdentifierType: ['int']
Decl: x
TypeDecl: x
IdentifierType: ['int']
Decl: y
TypeDecl: y
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d %d %d %d"
UnaryOp: &
ID: n
UnaryOp: &
ID: m
UnaryOp: &
ID: x
UnaryOp: &
ID: y
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: sol
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: m
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: vest
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
For:
Assignment: =
ID: j
ID: l
BinaryOp: <
ID: j
ID: m
UnaryOp: p++
ID: i
If:
BinaryOp: &&
BinaryOp: >=
ArrayRef:
ID: vest
ID: j
BinaryOp: -
ArrayRef:
ID: sol
ID: i
ID: x
BinaryOp: <=
ArrayRef:
ID: vest
ID: j
BinaryOp: +
ArrayRef:
ID: sol
ID: i
ID: y
Compound:
UnaryOp: p++
ID: v
UnaryOp: p++
ID: u
Break:
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: u
Assignment: =
ID: v
Constant: 0
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
For:
Assignment: =
ID: j
ID: l
BinaryOp: <
ID: j
ID: m
UnaryOp: p++
ID: i
If:
BinaryOp: &&
BinaryOp: >=
ArrayRef:
ID: vest
ID: j
BinaryOp: -
ArrayRef:
ID: sol
ID: i
ID: x
BinaryOp: <=
ArrayRef:
ID: vest
ID: j
BinaryOp: +
ArrayRef:
ID: sol
ID: i
ID: y
Compound:
UnaryOp: p++
ID: v
FuncCall:
ID: printf
ExprList:
Constant: "%d %d"
BinaryOp: +
ID: i
Constant: 1
BinaryOp: +
ID: j
Constant: 1
Break:
Return:
Constant: 0
