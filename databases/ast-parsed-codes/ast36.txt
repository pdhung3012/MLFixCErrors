FileAST
FuncDef:
Decl: moves_for
FuncDecl:
ParamList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
TypeDecl: moves_for
IdentifierType: ['long', 'int']
Compound:
If:
BinaryOp: ==
ID: i
Constant: 1
Return:
Constant: 1
Return:
BinaryOp: *
Constant: 2
FuncCall:
ID: moves_for
ExprList:
BinaryOp: -
ID: i
Constant: 1
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: t
TypeDecl: t
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: count
TypeDecl: count
IdentifierType: ['int']
Constant: 0
Decl: p
TypeDecl: p
IdentifierType: ['int']
Constant: 0
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: t
While:
BinaryOp: <
ID: count
ID: t
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <
ID: i
Constant: 100
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: ==
BinaryOp: -
FuncCall:
ID: moves_for
ExprList:
ID: i
Constant: 1
ID: n
Compound:
Assignment: =
ID: p
Constant: 1
Break:
If:
BinaryOp: ==
ID: p
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "yes"
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "no"
UnaryOp: p++
ID: count
Return:
Constant: 0
