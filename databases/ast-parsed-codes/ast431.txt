FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: x
TypeDecl: x
IdentifierType: ['int']
Decl: y
TypeDecl: y
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: k
TypeDecl: k
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d%d%d%d"
UnaryOp: &
ID: n
UnaryOp: &
ID: m
UnaryOp: &
ID: x
UnaryOp: &
ID: y
Decl: S
ArrayDecl:
TypeDecl: S
IdentifierType: ['int']
ID: n
Decl: V
ArrayDecl:
TypeDecl: V
IdentifierType: ['int']
ID: m
Decl: A1
ArrayDecl:
TypeDecl: A1
IdentifierType: ['int']
ID: m
Decl: A2
ArrayDecl:
TypeDecl: A2
IdentifierType: ['int']
ID: m
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: S
ID: i
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
ID: m
UnaryOp: p++
ID: j
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: V
ID: j
Decl: p
TypeDecl: p
IdentifierType: ['int']
UnaryOp: -
Constant: 1
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
ID: m
UnaryOp: p++
ID: j
Compound:
For:
Assignment: =
ID: i
BinaryOp: +
ID: p
Constant: 1
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
If:
BinaryOp: &&
BinaryOp: <=
ArrayRef:
ID: V
ID: j
ArrayRef:
ID: S
ID: i
BinaryOp: >=
ArrayRef:
ID: V
ID: j
ArrayRef:
ID: S
ID: i
Compound:
Assignment: =
ArrayRef:
ID: A1
ID: k
ID: i
Assignment: =
ArrayRef:
ID: A2
ID: k
ID: j
Assignment: =
ID: p
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: k
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: k
UnaryOp: p++
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "%d %d"
ArrayRef:
ID: A1
ID: i
ArrayRef:
ID: A2
ID: i
Return:
Constant: 0
