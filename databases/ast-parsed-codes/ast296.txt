FileAST
FuncDef:
Decl: fact
FuncDecl:
ParamList:
Decl: a
TypeDecl: a
IdentifierType: ['int']
TypeDecl: fact
IdentifierType: ['int']
Compound:
Decl: p
TypeDecl: p
IdentifierType: ['int']
Constant: 1
If:
Assignment: =
ID: a
Constant: 1
Return:
ID: p
Compound:
Assignment: =
ID: p
BinaryOp: *
ID: p
ID: a
Return:
FuncCall:
ID: fact
ExprList:
BinaryOp: -
ID: a
Constant: 1
FuncDef:
Decl: cat
FuncDecl:
ParamList:
Decl: a
TypeDecl: a
IdentifierType: ['int']
TypeDecl: cat
IdentifierType: ['int']
Compound:
Decl: p
TypeDecl: p
IdentifierType: ['int']
Constant: 1
Assignment: =
ID: p
BinaryOp: +
BinaryOp: /
FuncCall:
ID: fact
ExprList:
BinaryOp: *
Constant: 2
ID: a
BinaryOp: *
FuncCall:
ID: fact
ExprList:
ID: a
FuncCall:
ID: fact
ExprList:
ID: a
ID: p
If:
BinaryOp: ==
BinaryOp: -
ID: a
Constant: 1
Constant: 1
Return:
ID: p
Return:
FuncCall:
ID: cat
ExprList:
BinaryOp: -
ID: a
Constant: 1
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: t
TypeDecl: t
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: t
Decl: ar
ArrayDecl:
TypeDecl: ar
IdentifierType: ['int']
ID: t
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: ar
ID: i
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "%d"
FuncCall:
ID: cat
ExprList:
ArrayRef:
ID: ar
ID: i
Return:
Constant: 0
