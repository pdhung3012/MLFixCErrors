FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: x
TypeDecl: x
IdentifierType: ['int']
Decl: sum
TypeDecl: sum
IdentifierType: ['int']
Decl: max
TypeDecl: max
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d %d"
UnaryOp: &
ID: n
UnaryOp: &
ID: m
Decl: door
ArrayDecl:
TypeDecl: door
IdentifierType: ['int']
BinaryOp: +
ID: n
Constant: 1
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <=
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: sum
TypeDecl: sum
IdentifierType: ['int']
Constant: 0
BinaryOp: <=
ID: j
ID: m
UnaryOp: p++
ID: j
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: x
Assignment: =
ID: sum
BinaryOp: +
ID: sum
ID: x
Assignment: =
ArrayRef:
ID: door
ID: i
ID: sum
Assignment: =
ID: max
Constant: 0
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <=
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: >
ArrayRef:
ID: door
ID: i
ID: max
Compound:
Assignment: =
ID: max
ArrayRef:
ID: door
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: max
Return:
Constant: 0
