FileAST
FuncDef:
Decl: check
FuncDecl:
ParamList:
Decl: arr
ArrayDecl:
TypeDecl: arr
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
TypeDecl: check
IdentifierType: ['int']
Compound:
If:
BinaryOp: &&
BinaryOp: >
ArrayRef:
ID: arr
ID: i
ArrayRef:
ID: arr
BinaryOp: +
ID: i
Constant: 1
BinaryOp: >
ArrayRef:
ID: arr
ID: i
ArrayRef:
ID: arr
BinaryOp: -
ID: i
Constant: 1
Return:
Constant: 1
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: arr
ArrayDecl:
TypeDecl: arr
IdentifierType: ['int']
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: arr
ID: i
Decl: flag
TypeDecl: flag
IdentifierType: ['int']
If:
BinaryOp: ||
BinaryOp: >
ArrayRef:
ID: arr
Constant: 0
ArrayRef:
ID: arr
Constant: 1
BinaryOp: >
ArrayRef:
ID: arr
BinaryOp: -
ID: n
Constant: 1
ArrayRef:
ID: arr
BinaryOp: -
ID: n
Constant: 2
Assignment: =
ID: flag
Constant: 1
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <
ID: i
BinaryOp: -
ID: n
Constant: 1
UnaryOp: p++
ID: i
If:
FuncCall:
ID: check
ExprList:
ID: arr
ID: i
Assignment: =
ID: flag
Constant: 1
If:
ID: flag
FuncCall:
ID: printf
ExprList:
Constant: "Yesn"
FuncCall:
ID: printf
ExprList:
Constant: "Non"
Return:
Constant: 0
