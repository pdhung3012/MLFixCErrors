FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: t
TypeDecl: t
IdentifierType: ['int']
Decl: c
TypeDecl: c
IdentifierType: ['int']
Constant: 0
Decl: i
TypeDecl: i
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: k
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 1000
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
For:
DeclList:
Decl: x
TypeDecl: x
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: x
ID: n
UnaryOp: p++
ID: x
Compound:
For:
DeclList:
Decl: y
TypeDecl: y
IdentifierType: ['int']
ID: i
BinaryOp: <
ID: y
ID: n
UnaryOp: p++
ID: y
Compound:
Assignment: =
ID: t
BinaryOp: +
ArrayRef:
ID: a
ID: x
ArrayRef:
ID: a
ID: y
If:
BinaryOp: ==
ID: t
ID: k
Compound:
Assignment: =
ID: c
Constant: 1
If:
BinaryOp: ==
ID: c
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "lucky"
FuncCall:
ID: printf
ExprList:
Constant: "unlucky"
Return:
Constant: 0
