FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: sum
TypeDecl: sum
IdentifierType: ['int']
Constant: 0
Decl: num
TypeDecl: num
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: k
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: nolst
ArrayDecl:
TypeDecl: nolst
IdentifierType: ['int']
ID: n
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: n
For:
DeclList:
Decl: a
TypeDecl: a
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: a
ID: n
UnaryOp: p++
ID: a
FuncCall:
ID: scanf
ExprList:
Constant: "%d "
UnaryOp: &
ArrayRef:
ID: nolst
ID: a
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: +
ID: i
Constant: 1
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
Assignment: =
ID: sum
BinaryOp: +
ArrayRef:
ID: a
ID: i
ArrayRef:
ID: a
ID: j
If:
BinaryOp: ==
ID: sum
ID: k
Compound:
Assignment: =
ID: num
Constant: 2
Break:
Assignment: =
ID: sum
ArrayRef:
ID: a
ID: i
If:
BinaryOp: ==
ID: num
Constant: 2
FuncCall:
ID: printf
ExprList:
Constant: "lucky"
FuncCall:
ID: printf
ExprList:
Constant: "unlucky"
Return:
Constant: 0
