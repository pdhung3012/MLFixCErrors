FileAST
FuncDef:
Decl: catalan
FuncDecl:
ParamList:
Decl: n
TypeDecl: n
IdentifierType: ['int']
TypeDecl: catalan
IdentifierType: ['int']
Compound:
Decl: ans
TypeDecl: ans
IdentifierType: ['int']
Constant: 0
If:
BinaryOp: ==
ID: n
Constant: 1
Return:
Constant: 1
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <=
ID: i
BinaryOp: -
ID: n
Constant: 1
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: ans
BinaryOp: +
ID: ans
BinaryOp: *
FuncCall:
ID: catalan
ExprList:
ID: i
FuncCall:
ID: catalan
ExprList:
BinaryOp: -
BinaryOp: -
ID: n
Constant: 1
ID: i
Return:
ID: ans
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: t
TypeDecl: t
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
ID: t
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: t
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
ID: k
Assignment: =
ArrayRef:
ID: a
ID: i
FuncCall:
ID: catalan
ExprList:
ID: k
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ArrayRef:
ID: a
ID: i
Return:
Constant: 0
