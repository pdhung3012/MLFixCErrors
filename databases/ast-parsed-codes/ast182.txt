FileAST
Decl: opp
FuncDecl:
ParamList:
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
TypeDecl: opp
IdentifierType: ['void']
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: arr
ArrayDecl:
TypeDecl: arr
IdentifierType: ['int']
ID: n
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: arr
ID: i
FuncCall:
ID: opp
ExprList:
ID: arr
Constant: 0
BinaryOp: -
ID: n
Constant: 1
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ArrayRef:
ID: arr
ID: i
Return:
Constant: 0
FuncDef:
Decl: opp
FuncDecl:
ParamList:
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
TypeDecl: opp
IdentifierType: ['void']
Compound:
Decl: arr
TypeDecl: arr
IdentifierType: ['int']
If:
BinaryOp: ==
ID: i
ID: j
Return:
Compound:
Decl: temp
TypeDecl: temp
IdentifierType: ['int']
Assignment: =
ID: temp
ArrayRef:
ID: a
ID: i
Assignment: =
ArrayRef:
ID: a
ID: i
ArrayRef:
ID: a
ID: j
Assignment: =
ArrayRef:
ID: a
ID: j
ID: temp
FuncCall:
ID: opp
ExprList:
ID: arr
BinaryOp: +
ID: i
Constant: 1
BinaryOp: -
ID: j
Constant: 1
