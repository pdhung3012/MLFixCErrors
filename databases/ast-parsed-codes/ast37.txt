FileAST
FuncDef:
Decl: hanoi
FuncDecl:
ParamList:
Decl: n
TypeDecl: n
IdentifierType: ['int']
TypeDecl: hanoi
IdentifierType: ['int']
Compound:
If:
BinaryOp: ==
ID: n
Constant: 0
Return:
Constant: 0
If:
BinaryOp: ==
ID: n
Constant: 1
Return:
Constant: 1
Return:
BinaryOp: +
BinaryOp: *
Constant: 2
FuncCall:
ID: hanoi
ExprList:
BinaryOp: -
ID: n
Constant: 1
Constant: 1
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: c
TypeDecl: c
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: k
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
Constant: 10000000
UnaryOp: p++
ID: j
If:
BinaryOp: &&
BinaryOp: ==
FuncCall:
ID: hanoi
ExprList:
ID: j
ID: k
BinaryOp: <=
FuncCall:
ID: hanoi
ExprList:
ID: j
ID: k
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "yesn"
Break:
If:
BinaryOp: >
ID: c
ID: k
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "non"
Break:
Return:
Constant: 0
