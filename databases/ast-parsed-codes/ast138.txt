FileAST
FuncDef:
Decl: f
FuncDecl:
ParamList:
Decl: a
TypeDecl: a
IdentifierType: ['double']
TypeDecl: f
IdentifierType: ['double']
Compound:
Decl: result
TypeDecl: result
IdentifierType: ['double']
BinaryOp: +
UnaryOp: -
FuncCall:
ID: pow
ExprList:
ID: a
Constant: 2
BinaryOp: *
Constant: 3.0
ID: a
Return:
ID: result
FuncDef:
Decl: g
FuncDecl:
ParamList:
Decl: a
TypeDecl: a
IdentifierType: ['double']
TypeDecl: g
IdentifierType: ['double']
Compound:
Decl: result
TypeDecl: result
IdentifierType: ['double']
BinaryOp: -
BinaryOp: -
BinaryOp: *
Constant: 2.0
FuncCall:
ID: pow
ExprList:
ID: a
Constant: 3
FuncCall:
ID: pow
ExprList:
ID: a
Constant: 2
BinaryOp: *
Constant: 5.0
ID: a
Return:
ID: result
FuncDef:
Decl: sum
FuncDecl:
ParamList:
Decl: a
TypeDecl: a
IdentifierType: ['double']
Decl: n
TypeDecl: n
IdentifierType: ['double']
Decl: delx
TypeDecl: delx
IdentifierType: ['double']
TypeDecl: sum
IdentifierType: ['double']
Compound:
Decl: summation
TypeDecl: summation
IdentifierType: ['double']
Constant: 0
Decl: t
TypeDecl: t
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
Decl: x_j
TypeDecl: x_j
IdentifierType: ['double']
BinaryOp: +
ID: a
BinaryOp: *
ID: j
ID: delx
Decl: r
TypeDecl: r
IdentifierType: ['double']
FuncCall:
ID: fabs
ExprList:
BinaryOp: -
FuncCall:
ID: f
ExprList:
ID: x_j
FuncCall:
ID: g
ExprList:
ID: x_j
Assignment: =
ID: summation
BinaryOp: +
ID: summation
BinaryOp: *
ID: t
ID: delx
Return:
ID: summation
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: a
TypeDecl: a
IdentifierType: ['double']
Decl: b
TypeDecl: b
IdentifierType: ['double']
Decl: n
TypeDecl: n
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%lf"
UnaryOp: &
ID: a
FuncCall:
ID: scanf
ExprList:
Constant: "%lf"
UnaryOp: &
ID: b
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: delx
TypeDecl: delx
IdentifierType: ['double']
BinaryOp: /
BinaryOp: -
ID: b
ID: a
ID: n
Decl: output
TypeDecl: output
IdentifierType: ['double']
FuncCall:
ID: sum
ExprList:
ID: a
ID: n
ID: delx
FuncCall:
ID: printf
ExprList:
Constant: "%.4lf"
ID: output
Return:
Constant: 0
