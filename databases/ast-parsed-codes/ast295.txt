FileAST
Decl: a
PtrDecl:
TypeDecl: a
IdentifierType: ['int']
Decl: b
PtrDecl:
TypeDecl: b
IdentifierType: ['int']
Decl: c
PtrDecl:
TypeDecl: c
IdentifierType: ['int']
FuncDef:
Decl: move
FuncDecl:
ParamList:
Decl: From
TypeDecl: From
IdentifierType: ['char']
Decl: To
TypeDecl: To
IdentifierType: ['char']
TypeDecl: move
IdentifierType: ['void']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: N
TypeDecl: N
IdentifierType: ['int']
Assignment: =
ID: a
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
Constant: 15
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
Assignment: =
ID: b
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
Constant: 15
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
Assignment: =
ID: c
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
Constant: 15
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <=
ID: i
ID: N
UnaryOp: p++
ID: i
Compound:
Assignment: =
UnaryOp: *
BinaryOp: -
BinaryOp: +
ID: a
ID: i
Constant: 1
ID: i
Decl: NumPerLine
TypeDecl: NumPerLine
IdentifierType: ['int']
Constant: 8
Decl: num
TypeDecl: num
IdentifierType: ['int']
Constant: 0
If:
BinaryOp: ==
BinaryOp: %
ID: num
ID: NumPerLine
Constant: 0
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%5d: "
ID: num
Compound:
FuncCall:
ID: printf
ExprList:
Constant: " "
FuncCall:
ID: printf
ExprList:
Constant: "%c->%c"
ID: From
ID: To
UnaryOp: p++
ID: num
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: N
TypeDecl: N
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: A
TypeDecl: A
IdentifierType: ['char']
Constant: 'A'
Decl: B
TypeDecl: B
IdentifierType: ['char']
Constant: 'B'
Decl: C
TypeDecl: C
IdentifierType: ['char']
Constant: 'C'
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: N
Assignment: =
ID: a
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
Constant: 15
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
Assignment: =
ID: b
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
Constant: 15
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
Assignment: =
ID: c
Cast: None
Typename: None
PtrDecl:
TypeDecl: None
IdentifierType: ['int']
FuncCall:
ID: malloc
ExprList:
BinaryOp: *
Constant: 15
UnaryOp: sizeof
Typename: None
TypeDecl: None
IdentifierType: ['int']
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <=
ID: i
ID: N
UnaryOp: p++
ID: i
Compound:
Assignment: =
UnaryOp: *
BinaryOp: -
BinaryOp: +
ID: a
ID: i
Constant: 1
ID: i
Return:
Constant: 0
