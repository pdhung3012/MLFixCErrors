FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 20
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
If:
BinaryOp: &&
BinaryOp: >
ID: n
Constant: 1
BinaryOp: <
ArrayRef:
ID: a
Constant: 0
ArrayRef:
ID: a
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Yes"
Return:
Constant: 0
If:
BinaryOp: &&
BinaryOp: >
ID: n
Constant: 1
BinaryOp: >
ArrayRef:
ID: a
BinaryOp: -
ID: n
Constant: 2
ArrayRef:
ID: a
BinaryOp: -
ID: n
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Yes"
Return:
Constant: 0
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <
ID: i
BinaryOp: -
ID: n
Constant: 2
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: &&
BinaryOp: <
ArrayRef:
ID: a
ID: i
ArrayRef:
ID: a
BinaryOp: -
ID: i
Constant: 1
BinaryOp: <
ArrayRef:
ID: a
ID: i
ArrayRef:
ID: a
BinaryOp: +
ID: i
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Yes"
Return:
Constant: 0
FuncCall:
ID: printf
ExprList:
Constant: "No"
Return:
Constant: 0
