FileAST
FuncDef:
Decl: cat
FuncDecl:
ParamList:
Decl: n
TypeDecl: n
IdentifierType: ['int']
TypeDecl: cat
IdentifierType: ['int']
Compound:
Decl: val
TypeDecl: val
IdentifierType: ['int']
Constant: 0
Decl: i
TypeDecl: i
IdentifierType: ['int']
If:
BinaryOp: ==
ID: n
Constant: 0
Return:
Constant: 1
If:
BinaryOp: ==
ID: n
Constant: 1
Return:
Constant: 1
If:
BinaryOp: >
ID: n
Constant: 1
Compound:
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: val
BinaryOp: +
ID: val
BinaryOp: *
FuncCall:
ID: cat
ExprList:
ID: i
FuncCall:
ID: cat
ExprList:
BinaryOp: -
ID: n
ID: i
Return:
ID: val
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: t
TypeDecl: t
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: t
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: t
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
Compound:
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: <
FuncCall:
ID: cat
ExprList:
ID: j
ArrayRef:
ID: a
ID: i
UnaryOp: p++
ID: j
EmptyStatement:
FuncCall:
ID: printf
ExprList:
Constant: "%d"
FuncCall:
ID: cat
ExprList:
BinaryOp: -
ID: j
Constant: 1
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "%d"
FuncCall:
ID: cat
ExprList:
ArrayRef:
ID: a
ID: i
Return:
Constant: 0
