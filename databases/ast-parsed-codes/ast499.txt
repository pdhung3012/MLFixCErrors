FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: sum
TypeDecl: sum
IdentifierType: ['int']
Constant: 0
Decl: i
TypeDecl: i
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d "
UnaryOp: &
ArrayRef:
ID: a
ID: i
Assignment: =
ID: sum
BinaryOp: +
ID: sum
ArrayRef:
ID: a
ID: i
If:
BinaryOp: ||
BinaryOp: !=
BinaryOp: %
ID: n
Constant: 2
Constant: 0
BinaryOp: !=
BinaryOp: %
ID: sum
Constant: 2
Constant: 0
FuncCall:
ID: printf
ExprList:
Constant: "NO"
Compound:
Assignment: =
ID: sum
BinaryOp: /
ID: sum
Constant: 2
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
BinaryOp: -
ID: n
Constant: 1
UnaryOp: p++
ID: i
Compound:
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: <
ID: j
BinaryOp: -
ID: n
Constant: 1
UnaryOp: p++
ID: j
Compound:
Assignment: =
ID: sum
BinaryOp: -
ID: sum
ArrayRef:
ID: a
ID: j
If:
BinaryOp: ==
ID: sum
Constant: 0
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "YES"
Break:
If:
BinaryOp: ==
ID: sum
Constant: 0
Break:
If:
BinaryOp: !=
ID: sum
Constant: 0
FuncCall:
ID: printf
ExprList:
Constant: "NO"
Return:
Constant: 0
