FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: c
TypeDecl: c
IdentifierType: ['int']
Decl: d
TypeDecl: d
IdentifierType: ['int']
Decl: jm
TypeDecl: jm
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
Constant: 100
Decl: max
TypeDecl: max
IdentifierType: ['int']
Decl: min
TypeDecl: min
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d%d"
UnaryOp: &
ID: m
UnaryOp: &
ID: n
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <=
ID: i
ID: n
Assignment: =
ID: i
BinaryOp: +
ID: i
Constant: 1
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: c
Assignment: =
ID: max
ID: c
For:
Assignment: =
ID: j
Constant: 2
BinaryOp: <=
ID: j
ID: jm
Assignment: =
ID: j
BinaryOp: +
ID: j
Constant: 1
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: d
If:
BinaryOp: >
ID: d
ID: max
Assignment: =
ID: max
ID: d
Assignment: =
ArrayRef:
ID: b
ID: i
ID: max
Assignment: =
ID: min
ArrayRef:
ID: b
Constant: 1
For:
Assignment: =
ID: k
Constant: 1
BinaryOp: <=
ID: k
ID: m
Assignment: =
ID: k
BinaryOp: +
ID: k
Constant: 1
Compound:
If:
BinaryOp: <
ArrayRef:
ID: b
ID: k
ID: min
Assignment: =
ID: min
ArrayRef:
ID: b
ID: k
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: min
Return:
Constant: 0
