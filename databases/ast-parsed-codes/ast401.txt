FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 10000000
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
Constant: 10000
Decl: x
TypeDecl: x
IdentifierType: ['int']
Decl: temp
TypeDecl: temp
IdentifierType: ['int']
Decl: min
TypeDecl: min
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: k
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
BinaryOp: +
ID: i
Constant: 1
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: >
ArrayRef:
ID: a
ID: j
ArrayRef:
ID: a
ID: min
Compound:
Assignment: =
ID: temp
ArrayRef:
ID: a
ID: i
Assignment: =
ArrayRef:
ID: a
ID: i
ArrayRef:
ID: a
ID: min
Assignment: =
ArrayRef:
ID: a
ID: min
ID: temp
Assignment: =
ID: x
ArrayRef:
ID: a
ID: k
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: x
Return:
Constant: 0
