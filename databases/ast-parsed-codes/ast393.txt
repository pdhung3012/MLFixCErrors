FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: N
TypeDecl: N
IdentifierType: ['int']
Decl: K
TypeDecl: K
IdentifierType: ['int']
Decl: a
TypeDecl: a
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d %d"
UnaryOp: &
ID: N
UnaryOp: &
ID: K
Decl: ar
ArrayDecl:
TypeDecl: ar
IdentifierType: ['int']
ID: N
Decl: number
ArrayDecl:
TypeDecl: number
IdentifierType: ['int']
ID: N
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: N
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: ar
ID: i
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: N
UnaryOp: p++
ID: i
Compound:
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: +
ID: i
Constant: 1
BinaryOp: <
ID: j
ID: N
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: <
ArrayRef:
ID: number
ID: i
ArrayRef:
ID: number
ID: j
Compound:
Assignment: =
ID: a
ArrayRef:
ID: number
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ArrayRef:
ID: ar
BinaryOp: -
ID: K
Constant: 1
Return:
Constant: 0
