FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: c
TypeDecl: c
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 20
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%dn"
UnaryOp: &
ArrayRef:
ID: a
ID: i
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
Decl: x
TypeDecl: x
IdentifierType: ['int']
If:
BinaryOp: ==
ID: c
Constant: 0
Compound:
If:
BinaryOp: >
ArrayRef:
ID: a
ID: c
ArrayRef:
ID: a
BinaryOp: +
ID: c
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Yes"
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "No"
If:
BinaryOp: ==
ID: c
BinaryOp: -
ID: n
Constant: 1
Compound:
If:
BinaryOp: >
ArrayRef:
ID: a
ID: c
ArrayRef:
ID: a
BinaryOp: -
ID: c
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Yes"
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "No"
Compound:
If:
BinaryOp: &&
BinaryOp: >
ArrayRef:
ID: a
ID: c
ArrayRef:
ID: a
BinaryOp: -
ID: c
Constant: 1
BinaryOp: >
ArrayRef:
ID: a
ID: c
ArrayRef:
ID: a
BinaryOp: +
ID: c
Constant: 1
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Yes"
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "No"
FuncCall:
ID: printf
ExprList:
Constant: "n"
Return:
Constant: 0
