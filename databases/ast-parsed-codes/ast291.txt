FileAST
FuncDef:
Decl: move
FuncDecl:
ParamList:
Decl: From
TypeDecl: From
IdentifierType: ['char']
Decl: To
TypeDecl: To
IdentifierType: ['char']
TypeDecl: move
IdentifierType: ['void']
Compound:
Decl: NumPerLine
TypeDecl: NumPerLine
IdentifierType: ['int']
Constant: 8
Decl: num
TypeDecl: num
IdentifierType: ['int']
Constant: 0
If:
BinaryOp: ==
BinaryOp: %
ID: num
ID: NumPerLine
Constant: 0
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%5d: "
ID: num
Compound:
FuncCall:
ID: printf
ExprList:
Constant: " "
FuncCall:
ID: printf
ExprList:
Constant: "%c->%c"
ID: From
ID: To
UnaryOp: p++
ID: num
FuncDef:
Decl: move2
FuncDecl:
ParamList:
Decl: n
TypeDecl: n
IdentifierType: ['int']
TypeDecl: move2
IdentifierType: ['void']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
If:
BinaryOp: ==
ID: i
Constant: 0
Compound:
Return:
If:
Assignment: =
ID: i
Constant: 1
Compound:
FuncCall:
ID: move
ExprList:
Constant: 'A'
Constant: 'B'
FuncCall:
ID: move
ExprList:
Constant: 'B'
Constant: 'C'
FuncCall:
ID: move2
ExprList:
BinaryOp: -
ID: n
Constant: 1
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
FuncCall:
ID: move2
ExprList:
ID: n
Return:
Constant: 0
