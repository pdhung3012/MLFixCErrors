FileAST
Decl: fun
FuncDecl:
ParamList:
Decl: x
ArrayDecl:
TypeDecl: x
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
TypeDecl: fun
IdentifierType: ['int']
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: s
TypeDecl: s
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 20
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
Assignment: =
ID: s
FuncCall:
ID: fun
ExprList:
ID: a
ID: n
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: s
Return:
Constant: 0
FuncDef:
Decl: fun
FuncDecl:
ParamList:
Decl: x
ArrayDecl:
TypeDecl: x
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
TypeDecl: fun
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: t
TypeDecl: t
IdentifierType: ['int']
Decl: s
TypeDecl: s
IdentifierType: ['int']
Constant: 0
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 100
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: t
ArrayRef:
ID: a
ID: i
For:
Assignment: =
ID: j
Constant: 1
BinaryOp: <
ID: j
ID: n
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: <
ID: t
ArrayRef:
ID: a
ID: j
Compound:
Assignment: +=
ID: s
Constant: 1
Assignment: =
ID: t
ArrayRef:
ID: a
ID: j
If:
BinaryOp: ==
ID: s
Constant: 0
Continue:
Break:
Return:
ID: s
