FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n1
TypeDecl: n1
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n1
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 20
Decl: count
TypeDecl: count
IdentifierType: ['int']
Constant: 0
Decl: k
TypeDecl: k
IdentifierType: ['int']
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n1
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
Decl: n2
TypeDecl: n2
IdentifierType: ['int']
Decl: s
ArrayDecl:
TypeDecl: s
IdentifierType: ['int']
Constant: 20
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n2
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n2
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: s
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n1
UnaryOp: p++
ID: i
Compound:
For:
DeclList:
Decl: j
TypeDecl: j
IdentifierType: ['int']
BinaryOp: <
ID: j
ID: n1
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: >
ArrayRef:
ID: a
ID: j
ArrayRef:
ID: a
ID: i
Compound:
Continue:
Compound:
Assignment: =
ID: k
ArrayRef:
ID: a
ID: j
Assignment: =
ID: i
ID: j
Continue:
Return:
Constant: 0
