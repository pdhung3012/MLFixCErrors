FileAST
FuncDef:
Decl: input
FuncDecl:
ParamList:
Decl: ar
ArrayDecl:
TypeDecl: ar
IdentifierType: ['int']
Decl: size
TypeDecl: size
IdentifierType: ['int']
TypeDecl: input
IdentifierType: ['void']
Compound:
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: size
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: ar
ID: i
FuncDef:
Decl: match
FuncDecl:
ParamList:
Decl: str
ArrayDecl:
TypeDecl: str
IdentifierType: ['int']
Decl: size
TypeDecl: size
IdentifierType: ['int']
Decl: st
ArrayDecl:
TypeDecl: st
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
TypeDecl: match
IdentifierType: ['void']
Compound:
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: size
UnaryOp: p++
ID: i
Compound:
For:
DeclList:
Decl: k
TypeDecl: k
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: k
ID: n
UnaryOp: p++
ID: k
Compound:
If:
BinaryOp: ==
ArrayRef:
ID: str
ID: i
ArrayRef:
ID: st
ID: k
Compound:
Assignment: =
ArrayRef:
ID: str
ID: i
Constant: 234567
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n1
TypeDecl: n1
IdentifierType: ['int']
Decl: n2
TypeDecl: n2
IdentifierType: ['int']
Decl: min
TypeDecl: min
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 45
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
Constant: 45
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n1
FuncCall:
ID: input
ExprList:
ID: a
ID: n1
FuncCall:
ID: match
ExprList:
ID: a
ID: n1
ID: b
ID: n2
Assignment: =
ID: min
ArrayRef:
ID: a
Constant: 0
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Constant: 0
BinaryOp: <
ID: i
ID: n2
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: >
ID: min
ArrayRef:
ID: a
ID: i
Compound:
Assignment: =
ID: min
ArrayRef:
ID: a
ID: i
If:
BinaryOp: !=
ID: min
Constant: 234567
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: min
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "NO"
Return:
Constant: 0
