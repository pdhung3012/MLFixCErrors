FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Decl: x
TypeDecl: x
IdentifierType: ['int']
Decl: y
TypeDecl: y
IdentifierType: ['int']
Decl: c
TypeDecl: c
IdentifierType: ['int']
Constant: 0
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
Constant: 1000000
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
Constant: 1000000
Decl: l
ArrayDecl:
ArrayDecl:
TypeDecl: l
IdentifierType: ['int']
Constant: 1000
Constant: 1000
FuncCall:
ID: scanf
ExprList:
Constant: "%d "
UnaryOp: &
ID: n
FuncCall:
ID: scanf
ExprList:
Constant: "%d "
UnaryOp: &
ID: m
FuncCall:
ID: scanf
ExprList:
Constant: "%d "
UnaryOp: &
ID: x
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: y
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d "
UnaryOp: &
ArrayRef:
ID: a
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
FuncCall:
ID: scanf
ExprList:
Constant: "%d "
UnaryOp: &
ArrayRef:
ID: b
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
ID: c
BinaryOp: <
ID: j
ID: m
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: &&
BinaryOp: >=
ArrayRef:
ID: b
ID: j
BinaryOp: -
ArrayRef:
ID: a
ID: i
ID: x
BinaryOp: <=
ArrayRef:
ID: b
ID: j
BinaryOp: +
ArrayRef:
ID: a
ID: i
ID: y
Compound:
UnaryOp: p++
ID: c
Assignment: =
ArrayRef:
ArrayRef:
ID: l
ID: c
Constant: 0
ID: i
Assignment: =
ArrayRef:
ArrayRef:
ID: l
ID: c
Constant: 1
ID: j
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: c
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: c
UnaryOp: p++
ID: i
Compound:
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: <
ID: j
Constant: 2
UnaryOp: p++
ID: j
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ArrayRef:
ArrayRef:
ID: l
ID: i
ID: j
If:
BinaryOp: <
ID: i
BinaryOp: -
ID: c
Constant: 1
FuncCall:
ID: printf
ExprList:
Constant: ""
Return:
Constant: 0
