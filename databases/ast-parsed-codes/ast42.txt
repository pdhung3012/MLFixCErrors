FileAST
FuncDef:
Decl: hanoi
FuncDecl:
ParamList:
Decl: n
TypeDecl: n
IdentifierType: ['int']
TypeDecl: hanoi
IdentifierType: ['int']
Compound:
If:
BinaryOp: ==
ID: n
Constant: 1
Compound:
Return:
Constant: 1
Return:
BinaryOp: +
BinaryOp: *
Constant: 2
FuncCall:
ID: hanoi
ExprList:
BinaryOp: -
ID: n
Constant: 1
Constant: 1
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: test
TypeDecl: test
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: test
Decl: arr
ArrayDecl:
TypeDecl: arr
IdentifierType: ['int']
ID: test
Decl: series
ArrayDecl:
TypeDecl: series
IdentifierType: ['int']
Constant: 1000
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: test
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: arr
ID: i
For:
Assignment: =
ID: i
Constant: 0
BinaryOp: <
ID: i
ID: test
UnaryOp: p++
ID: i
Compound:
If:
BinaryOp: ==
ArrayRef:
ID: arr
ID: i
FuncCall:
ID: hanoi
ExprList:
ID: n
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "Yes"
FuncCall:
ID: printf
ExprList:
Constant: "No"
Return:
Constant: 0
