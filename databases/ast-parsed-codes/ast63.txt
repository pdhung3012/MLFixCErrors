FileAST
FuncDef:
Decl: max
FuncDecl:
ParamList:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
TypeDecl: max
IdentifierType: ['void']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: m
TypeDecl: m
IdentifierType: ['int']
Constant: 0
Decl: b
ArrayDecl:
TypeDecl: b
IdentifierType: ['int']
ID: n
Decl: bg
TypeDecl: bg
IdentifierType: ['int']
For:
Assignment: =
ID: i
ID: n
BinaryOp: >=
ID: i
Constant: 1
UnaryOp: p--
ID: i
Compound:
Assignment: =
ArrayRef:
ID: b
ID: i
ID: m
Assignment: =
ID: m
Constant: 0
For:
Assignment: =
ID: j
Constant: 1
BinaryOp: <
ID: j
ID: i
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: >
ArrayRef:
ID: a
BinaryOp: +
ID: j
Constant: 1
ArrayRef:
ID: a
ID: j
UnaryOp: p++
ID: m
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Decl: bg
TypeDecl: bg
IdentifierType: ['int']
Constant: 0
If:
BinaryOp: >
ArrayRef:
ID: b
ID: i
ID: bg
Assignment: =
ID: bg
ArrayRef:
ID: b
ID: i
FuncCall:
ID: printf
ExprList:
Constant: "%d"
ID: bg
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Decl: a
ArrayDecl:
TypeDecl: a
IdentifierType: ['int']
ID: n
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <=
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ArrayRef:
ID: a
ID: i
FuncCall:
ID: max
ExprList:
ID: n
ID: a
Return:
Constant: 0
