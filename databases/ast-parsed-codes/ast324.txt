FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: a
TypeDecl: a
IdentifierType: ['double']
Decl: b
TypeDecl: b
IdentifierType: ['double']
Decl: area
TypeDecl: area
IdentifierType: ['double']
Decl: fun
TypeDecl: fun
IdentifierType: ['double']
Decl: x
TypeDecl: x
IdentifierType: ['double']
Decl: h
TypeDecl: h
IdentifierType: ['double']
FuncCall:
ID: scanf
ExprList:
Constant: "%lf"
UnaryOp: &
ID: a
FuncCall:
ID: scanf
ExprList:
Constant: "%lf"
UnaryOp: &
ID: b
Decl: n
TypeDecl: n
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Assignment: =
ID: h
BinaryOp: /
BinaryOp: -
ID: b
ID: a
ID: n
If:
BinaryOp: &&
BinaryOp: >
ID: a
UnaryOp: -
Constant: 1
BinaryOp: <
ID: b
Constant: 1
Compound:
Assignment: =
ID: area
Constant: 0
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: area
BinaryOp: +
ID: area
BinaryOp: *
FuncCall:
ID: pow
ExprList:
BinaryOp: +
ID: a
BinaryOp: *
ID: i
ID: h
Constant: 2
ID: h
FuncCall:
ID: printf
ExprList:
Constant: "%lf"
ID: area
If:
BinaryOp: &&
BinaryOp: >
ID: a
Constant: 1
BinaryOp: >
ID: b
Constant: 1
Compound:
Assignment: =
ID: area
Constant: 0
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: area
BinaryOp: +
ID: area
BinaryOp: *
FuncCall:
ID: pow
ExprList:
BinaryOp: +
ID: a
BinaryOp: *
ID: i
ID: h
Constant: 3
ID: h
FuncCall:
ID: printf
ExprList:
Constant: "%lf"
ID: area
If:
BinaryOp: &&
BinaryOp: <
ID: a
UnaryOp: -
Constant: 1
BinaryOp: <
ID: b
UnaryOp: -
Constant: 1
Compound:
Assignment: =
ID: area
Constant: 0
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: area
BinaryOp: +
ID: area
ID: h
FuncCall:
ID: printf
ExprList:
Constant: "%lf"
ID: area
If:
BinaryOp: &&
BinaryOp: <
ID: a
Constant: 1
BinaryOp: >
ID: b
Constant: 1
Compound:
Assignment: =
ID: area
Constant: 0
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <
ID: i
ID: n
UnaryOp: p++
ID: i
Compound:
Assignment: =
ID: area
BinaryOp: +
ID: area
ID: h
FuncCall:
ID: printf
ExprList:
Constant: "%lf"
ID: area
Return:
Constant: 0
