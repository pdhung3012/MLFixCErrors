FileAST
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: p
TypeDecl: p
IdentifierType: ['int']
Decl: q
TypeDecl: q
IdentifierType: ['int']
Decl: r
TypeDecl: r
IdentifierType: ['int']
Decl: s
TypeDecl: s
IdentifierType: ['int']
Decl: t
TypeDecl: t
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
Assignment: =
ID: p
BinaryOp: /
ID: n
Constant: 1000
Assignment: =
ID: q
BinaryOp: -
BinaryOp: /
ID: n
Constant: 100
BinaryOp: *
ID: p
Constant: 10
Assignment: =
ID: r
BinaryOp: -
BinaryOp: /
ID: n
Constant: 10
BinaryOp: *
BinaryOp: /
ID: n
Constant: 100
Constant: 10
Assignment: =
ID: s
BinaryOp: -
ID: n
BinaryOp: *
BinaryOp: /
ID: n
Constant: 10
Constant: 10
Assignment: =
ID: t
BinaryOp: +
BinaryOp: +
BinaryOp: +
ID: p
ID: q
ID: r
ID: s
For:
DeclList:
Decl: i
TypeDecl: i
IdentifierType: ['int']
BinaryOp: <=
ID: i
Constant: 2016
Assignment: =
ID: i
BinaryOp: +
ID: i
Constant: 1
Compound:
If:
BinaryOp: >=
BinaryOp: *
ID: i
ID: t
Constant: 2016
Compound:
FuncCall:
ID: printf
ExprList:
Constant: "%d"
BinaryOp: *
ID: i
ID: t
Break:
Return:
Constant: 0
