FileAST
FuncDef:
Decl: hanoi
FuncDecl:
ParamList:
ID: n
TypeDecl: hanoi
IdentifierType: ['int']
Compound:
If:
BinaryOp: ==
ID: n
Constant: 0
Return:
Constant: 1
If:
BinaryOp: ==
ID: n
Constant: 1
Return:
Constant: 2
Return:
BinaryOp: *
Constant: 2
FuncCall:
ID: hanoi
ExprList:
BinaryOp: -
ID: n
Constant: 1
FuncDef:
Decl: main
FuncDecl:
TypeDecl: main
IdentifierType: ['int']
Compound:
Decl: t
TypeDecl: t
IdentifierType: ['int']
Decl: i
TypeDecl: i
IdentifierType: ['int']
Decl: n
TypeDecl: n
IdentifierType: ['int']
Decl: j
TypeDecl: j
IdentifierType: ['int']
Decl: k
TypeDecl: k
IdentifierType: ['int']
Decl: x
TypeDecl: x
IdentifierType: ['int']
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: t
For:
Assignment: =
ID: i
Constant: 1
BinaryOp: <
ID: i
ID: t
UnaryOp: p++
ID: i
Compound:
FuncCall:
ID: scanf
ExprList:
Constant: "%d"
UnaryOp: &
ID: n
For:
Assignment: =
ID: j
Constant: 0
BinaryOp: >=
ID: k
BinaryOp: -
FuncCall:
ID: hanoi
ExprList:
ID: j
Constant: 1
UnaryOp: p++
ID: j
Compound:
If:
BinaryOp: ==
BinaryOp: -
FuncCall:
ID: hanoi
ExprList:
ID: j
Constant: 1
ID: k
FuncCall:
ID: printf
ExprList:
Constant: "yes"
FuncCall:
ID: printf
ExprList:
Constant: "no"
Return:
Constant: 0
